{"version":3,"sources":["webpack:///./src/lib/helpers.ts","webpack:///./src/pages/challenge-to-technology.tsx","webpack:///./src/components/core/fixed-header-offset.tsx"],"names":["mapEdgesToNodes","data","edges","map","edge","node","getChallengesDictionary","challenges","challenge","i","length","id","getChallengeFamiliesDictionary","familyData","challengeData","challengeFamilies","familyNodes","challengeNodes","familyNode","familyChallenges","filter","family","familyName","addTechToChallenge","challengeId","techId","associatedTech","includes","push","createTabContent","tech","summary","title","text","timetoeffect_optimistic","timetoeffect_likely","timetoeffect_pessimistic","exampleApplications","example_applications","references","tabs","content","overview","implicationsDefenceSecurity","softwareAndAiRequirements","legalEthicalImplications","strategicImpactAssessment","typeOfTechnology","prominentDevelopers","ChallengeToTech","props","allCognitiveChallengeFamiliesCsv","allCognitiveChallengesCsv","pageHeader","hasNavbar","className","to","Object","keys","famId","key","onClick","familyId","navigate","chalId","FixedHeaderOffset"],"mappings":"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","file":"component---src-pages-challenge-to-technology-tsx-bb502fa840356d3efd14.js","sourcesContent":["import {\n  TechnologyDictionary,\n  Challenge,\n  ChallengeDictionary,\n  ChallengeFamilyDictionary,\n  Technology,\n} from '../../types/Global'\n\nexport function cn(...args: any) {\n  return args.filter(Boolean).join(' ')\n}\n\nexport function mapEdgesToNodes(data: any) {\n  if (!data.edges) return data ? data : []\n  return data.edges.map((edge: any) => edge.node)\n}\n\nexport function getChallengesDictionary(data: any) {\n  let challenges: ChallengeDictionary = {}\n  if (!data.edges) return data ? data : {}\n\n  // challenges\n  if (data.edges[0].node.challenge) {\n    for (let i = 0; i < data.edges.length; i++) {\n      challenges[data.edges[i].node.id] = data.edges[i].node\n    }\n    return challenges\n  }\n}\n\nexport function getChallengeFamiliesDictionary(familyData: any, challengeData: any) {\n  let challengeFamilies: ChallengeFamilyDictionary = {}\n\n  if (familyData.edges && challengeData.edges) {\n    let familyNodes = mapEdgesToNodes(familyData)\n    let challengeNodes = mapEdgesToNodes(challengeData)\n\n    // challengeFamilies\n    for (var familyNode of familyNodes) {\n      let familyChallenges = challengeNodes\n        .filter((challenge: Challenge) => challenge.family === familyNode.family)\n        .map((challenge: Challenge) => {\n          return challenge.id\n        })\n\n      challengeFamilies[familyNode.family] = {\n        family: familyNode.family,\n        familyName: familyNode.familyName,\n        challenges: familyChallenges || [],\n      }\n    }\n  }\n\n  return challengeFamilies\n}\n\nexport function getTechnologyDictionary(data: any) {\n  let technologyDictionary: TechnologyDictionary = {}\n  if (!data.edges) return data ? data : []\n\n  if (data.edges[0].node.disruptiveness) {\n    for (let i = 0; i < data.edges.length; i++) {\n      technologyDictionary[data.edges[i].node.id] = data.edges[i].node\n    }\n    return technologyDictionary\n  }\n}\n\n/**\n * ### Adds the techID to the challenge's associatedTech[]\n * @param challengeId ID of the challenge\n * @param techId Tech instance ID\n */\nexport function addTechToChallenge(challenges: ChallengeDictionary, challengeId: string, techId: string): void {\n  // Creates empty associatedTech\n  if (!challenges[challengeId].associatedTech) {\n    challenges[challengeId].associatedTech = []\n  }\n\n  // Only adds if the id is not present\n  if (!challenges[challengeId].associatedTech!.includes(techId)) {\n    challenges[challengeId].associatedTech!.push(techId)\n  }\n\n  return\n}\n\n/**\n * ### Returns an array of techIds used to filter by Challenge\n * If challenge has no associated tech then [ ] is returned\n */\nexport const filterByChallenge = (challengeIds: string[], allTechIds: string[]): string[] => {\n  let enabledTechIds: string[] = []\n\n  allTechIds.map((id) => (challengeIds!.includes(id) ? enabledTechIds.push(id) : null))\n\n  return enabledTechIds\n}\n\nexport const createTabContent = (tech: Technology) => ({\n  summary: {\n    title: 'Summary',\n    text: tech.summary,\n    timetoeffect_optimistic: tech.timetoeffect_optimistic,\n    timetoeffect_likely: tech.timetoeffect_likely,\n    timetoeffect_pessimistic: tech.timetoeffect_pessimistic,\n    exampleApplications: tech.example_applications,\n    references: tech.references,\n  },\n  tabs: [\n    {\n      id: 'overview',\n      title: 'Overview',\n      content: tech.overview,\n    },\n    {\n      id: 'implicationsDefenceSecurity',\n      title: 'Implications for Defence & Security',\n      content: tech.implicationsDefenceSecurity,\n    },\n    {\n      id: 'softwareAndAiRequirements',\n      title: 'Software / AI Requirements',\n      content: tech.softwareAndAiRequirements,\n    },\n    {\n      id: 'legalEthicalImplications',\n      title: 'Legal/Ethical Implications',\n      content: tech.legalEthicalImplications,\n    },\n    {\n      id: 'strategicImpactAssessment',\n      title: 'Strategic DLOD Impact Assessment',\n      content: tech.strategicImpactAssessment,\n    },\n    {\n      id: 'typeOfTechnology',\n      title: 'Type of Technology',\n      content: tech.typeOfTechnology,\n    },\n    {\n      id: 'prominentDevelopers',\n      title: 'Prominent Developers',\n      content: tech.prominentDevelopers,\n    },\n  ],\n})\n","import React from 'react'\nimport {\n  ChallengeFamilyDictionary,\n  ChallengeDictionary,\n  ChallengeFamilyQueryData,\n  ChallengeQueryData,\n} from '../../types/Global'\nimport { getChallengeFamiliesDictionary, getChallengesDictionary } from '../lib/helpers'\nimport { graphql, Link, navigate } from 'gatsby'\nimport SEO from '../components/core/seo'\nimport Layout from '../components/core/layout'\nimport '../styles/challenge-to-tech.scss'\nimport { FixedHeaderOffset } from '../components/core/fixed-header-offset'\n\ninterface Props {\n  data: {\n    allCognitiveChallengeFamiliesCsv: ChallengeFamilyQueryData[]\n    allCognitiveChallengesCsv: ChallengeQueryData[]\n  }\n}\n\nexport default function ChallengeToTech(props: Props) {\n  const { data } = props\n\n  const challengeFamilies: ChallengeFamilyDictionary = getChallengeFamiliesDictionary(\n    data.allCognitiveChallengeFamiliesCsv,\n    data.allCognitiveChallengesCsv\n  )\n\n  const challenges: ChallengeDictionary = getChallengesDictionary(data.allCognitiveChallengesCsv)\n\n  const onChallengeFamilyPress = (familyId: string) => {\n    navigate(`/challenge-to-technology-visualisation?family=FAMILY${familyId}`)\n  }\n\n  return (\n    <Layout pageHeader=\"Technology to Future Challenge Mapping\">\n      <SEO title=\"Challenge to Technology\" />\n      <FixedHeaderOffset hasNavbar={true} />\n      <div className=\"c-to-t__grid\">\n        <div className=\"c-to-t__grid-text\">\n          This page shows a series of defence-specific challenges which were extracted from a detailed analysis of a\n          number of future vision documents. They represent challenges that could emerge from the future operating\n          environment and are grouped into thematic families. Selecting a family of challenges will allow you to see the\n          links between those challenges and any relevant HMI technologies. For further details of just the challenges\n          themselves, click <Link to=\"/cognitive-challenge-library\">here</Link>\n        </div>\n        <div className=\"c-to-t__families\">\n          {Object.keys(challengeFamilies).map((famId) => (\n            <div key={famId} className=\"c-to-t__family-group\" onClick={() => onChallengeFamilyPress(famId)}>\n              <div className=\"c-to-t__family-grid-title\">{challengeFamilies[famId].familyName}</div>\n              <div className=\"c-to-t__challenge-grid\">\n                {challengeFamilies[famId].challenges.map((chalId) => (\n                  <div key={chalId} className=\"c-to-t__challenge\">\n                    {challenges[chalId].challenge}\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport const challengesAndFamilys = graphql`\n  {\n    allCognitiveChallengeFamiliesCsv {\n      edges {\n        node {\n          family\n          familyName\n        }\n      }\n    }\n    allCognitiveChallengesCsv {\n      edges {\n        node {\n          id\n          family\n          challenge\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\n\nexport interface Props {\n  hasNavbar: boolean\n}\n\nexport const FixedHeaderOffset = (props: Props) => {\n  const { hasNavbar } = props\n  return <div className={hasNavbar ? 'fixed-header-offset-with-navbar' : 'fixed-header-offset'}></div>\n}\n"],"sourceRoot":""}