{"version":3,"sources":["webpack:///./src/pages/technology-convergence.tsx"],"names":["TechnologyConvergence","props","data","technologies","mapEdgesToNodes","allTechnologiesCsv","technologyImages","useState","explicitlyEnabledIds","setExplicitlyEnabled","enabledTechnologies","simpleFilterTechnologies","submitEnabled","length","resetEnabled","title-","pageHeader","title","hasNavbar","className","map","tech","technologyImage","find","image","name","icon","imageData","getImage","key","id","onClick","techId","isExplicityEnabled","includes","filter","c","data-tip","data-iscapture","style","opacity","alt","navToTechPage","slug","window","open","withPrefix","disabled","some","params","forEach","concat","replace","navigate"],"mappings":"kRAkBe,SAASA,EAAsBC,GAAc,IAClDC,EAASD,EAATC,KAKFC,EAA6BC,YAAgBF,EAAKG,oBAClDC,EAAmBF,YAAgBH,EAAMC,KAAKI,kBAPM,EASLC,mBAAmB,IAAjEC,EATmD,KAS7BC,EAT6B,KAYpDC,EAAsBC,YAAyBR,EAAcK,GAE7DI,EAAgBF,EAAoBG,QAVnB,GAU+CH,EAAoBG,QAXnE,EAYjBC,EAAeJ,EAAoBG,OAAS,EAsClD,OACE,kBAAC,IAAD,CAAQE,SAAO,YAAYC,WAAY,mCACrC,kBAAC,IAAD,CAAKC,MAAM,2BACX,kBAAC,IAAD,CAAmBC,WAAW,IAC9B,yBAAKC,UAAU,eACb,yBAAKA,UAAU,0BAAf,6NAKA,yBAAKA,UAAW,wBACbhB,EAAaiB,KAAI,SAACC,GACjB,IAAMC,EAAkBhB,EAAiBiB,MAAK,SAACC,GAAD,OAAgBA,EAAMC,OAASJ,EAAKK,QAElF,IAAKJ,EAAiB,OAAO,KAE7B,IAAIK,EAAYC,YAASN,GAEzB,OACE,yBAAKO,IAAKR,EAAKS,GAAIX,UAAU,0BAC3B,yBAAKA,UAAU,+BACb,yBAAKY,QAAS,kBArDLC,EAqD2BX,EAAKS,GApDjDG,EAAqBzB,EAAqB0B,SAASF,QAGvDvB,EADEwB,EACmBzB,EAAqB2B,QAAO,SAACC,GAAD,OAAOA,IAAMJ,KAEzC,GAAD,mBAAKxB,GAAL,CAA2BwB,KAN3B,IAACA,EACjBC,GAoDsDI,WAAUhB,EAAKJ,OAAS,GAAIqB,iBAAe,QACvF,kBAAC,IAAD,CACEC,MAAO,CAAEC,QAAShC,EAAqB0B,SAASb,EAAKS,IAAM,EAAI,IAC/DN,MAAOG,EACPc,IAAKpB,EAAKJ,SAGd,4BACEE,UAAU,iCACVY,QAAS,kBAhDFW,EAgDwBrB,EAAKsB,UA/CpDC,OAAOC,KAAKC,qBAAW,eAAeJ,GAAkB,UADlC,IAACA,GAiDPK,UAAWrC,EAAoBsC,MAAK,SAAClB,GAAD,OAAQA,IAAOT,EAAKS,OAEvDT,EAAKJ,cAQpB,yBAAKE,UAAU,8BACb,4BAAQ4B,UAAWjC,EAAciB,QAAS,WA7C9CtB,EAAqB,KA6C+C8B,MAAO,CAAEC,QAAU1B,EAAqB,EAAN,KAAlG,SAGA,4BAAQiC,UAAWnC,EAAemB,QAAS,kBA1D3CkB,EAAiB,GAErBvC,EAAoBwC,SAAQ,SAACpB,GAC3BmB,EAASA,EAAOE,OAAUrB,EAAjB,QAEXmB,EAASA,EAAOG,QAAQ,MAAO,SAC/BC,mBAAS,sDAAsDJ,GAP3C,IAChBA,GA0DkEV,MAAO,CAAEC,QAAU5B,EAAsB,EAAN,KAArG,c","file":"component---src-pages-technology-convergence-tsx-c205316f85978d06407e.js","sourcesContent":["import React, { useState } from 'react'\nimport Layout from '../components/core/layout'\nimport SEO from '../components/core/seo'\nimport { graphql, navigate, withPrefix } from 'gatsby'\nimport { Technology, TechnologyQueryData } from '../../types/Global'\nimport { mapEdgesToNodes } from '../lib/helpers'\nimport { simpleFilterTechnologies } from '../components/technology-selector/filter-tech'\nimport { FileNode } from 'gatsby-plugin-image/dist/src/components/hooks'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport '../styles/tech-convergance.scss'\nimport { FixedHeaderOffset } from '../components/core/fixed-header-offset'\ninterface Props {\n  data: {\n    allTechnologiesCsv: TechnologyQueryData[]\n    technologyImages: FileNode[]\n  }\n}\n\nexport default function TechnologyConvergence(props: Props) {\n  const { data } = props\n  // This is the max and min number of tech to compare\n  const techCompareMax = 5\n  const techCompareMin = 1\n\n  const technologies: Technology[] = mapEdgesToNodes(data.allTechnologiesCsv)\n  const technologyImages = mapEdgesToNodes(props.data.technologyImages)\n\n  const [explicitlyEnabledIds, setExplicitlyEnabled] = useState<string[]>([])\n\n  // Calculate the current available techs\n  const enabledTechnologies = simpleFilterTechnologies(technologies, explicitlyEnabledIds)\n\n  const submitEnabled = enabledTechnologies.length >= techCompareMin && enabledTechnologies.length <= techCompareMax\n  const resetEnabled = enabledTechnologies.length > 0\n\n  /**\n   * When a specific technology is selected - remove it from view\n   * @param techId\n   */\n  const onClickTechItem = (techId: string): void => {\n    const isExplicityEnabled = explicitlyEnabledIds.includes(techId)\n\n    if (isExplicityEnabled) {\n      setExplicitlyEnabled(explicitlyEnabledIds.filter((c) => c !== techId))\n    } else {\n      setExplicitlyEnabled([...explicitlyEnabledIds, techId])\n    }\n  }\n\n  /**\n   * Send user to the tech details page when they click on \"To Library Page\"\n   * @param navToTechPage Tech name to link to page\n   */\n  const onClickTechLink = (navToTechPage: string) => {\n    window.open(withPrefix(`/technology/${navToTechPage}`), '_blank')\n  }\n\n  const onClickSubmit = () => {\n    let params: string = ''\n\n    enabledTechnologies.forEach((id) => {\n      params = params.concat(`${id},`)\n    })\n    params = params.replace(/\\,$/, '')\n    navigate(`/technology-convergence-visualisation?technologies=${params}`)\n  }\n\n  const onClickReset = () => {\n    setExplicitlyEnabled([])\n  }\n\n  return (\n    <Layout title-=\"Aleph HMI\" pageHeader={'Technology Convergence Timeline'}>\n      <SEO title=\"Technology Convergence\" />\n      <FixedHeaderOffset hasNavbar={true} />\n      <div className=\"tech-conver\">\n        <div className=\"tech-conver__header-GI\">\n          Choose from technologies below to generate a visualisation showing how these technologies could combine with\n          others to produce new integrated capabilities in the future. Select up to five technologies and then submit.\n        </div>\n\n        <div className={'tech-conver__main-GI'}>\n          {technologies.map((tech) => {\n            const technologyImage = technologyImages.find((image: any) => image.name === tech.icon)\n\n            if (!technologyImage) return null\n\n            let imageData = getImage(technologyImage)!\n\n            return (\n              <div key={tech.id} className=\"tech-conver__grid-item\">\n                <div className=\"tech-conver__tech-container\">\n                  <div onClick={() => onClickTechItem(tech.id)} data-tip={tech.title || ''} data-iscapture=\"true\">\n                    <GatsbyImage\n                      style={{ opacity: explicitlyEnabledIds.includes(tech.id) ? 1 : 0.2 }}\n                      image={imageData}\n                      alt={tech.title}\n                    />\n                  </div>\n                  <button\n                    className=\"tech-conver__tech-click-button\"\n                    onClick={() => onClickTechLink(tech.slug)}\n                    disabled={!enabledTechnologies.some((id) => id === tech.id)}\n                  >\n                    {tech.title}\n                  </button>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n      <div className=\"tech-conver__buttons-right\">\n        <button disabled={!resetEnabled} onClick={() => onClickReset()} style={{ opacity: !resetEnabled ? 0.3 : 1 }}>\n          Reset\n        </button>\n        <button disabled={!submitEnabled} onClick={() => onClickSubmit()} style={{ opacity: !submitEnabled ? 0.3 : 1 }}>\n          Submit\n        </button>\n      </div>\n    </Layout>\n  )\n}\n\nexport const TechnologyQuery = graphql`\n  query {\n    allTechnologiesCsv {\n      edges {\n        node {\n          id\n          icon\n          title\n          slug\n        }\n      }\n    }\n    technologyImages: allFile(filter: { relativePath: { regex: \"image/black/png/\" } }) {\n      edges {\n        node {\n          name\n          childImageSharp {\n            gatsbyImageData(layout: FULL_WIDTH, placeholder: TRACED_SVG)\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}