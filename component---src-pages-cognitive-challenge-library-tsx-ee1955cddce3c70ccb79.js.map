{"version":3,"sources":["webpack:///./src/lib/helpers.ts","webpack:///./src/components/challenges-library/TableHeaders.tsx","webpack:///./src/components/challenges-library/TableRows.tsx","webpack:///./src/components/challenges-library/FamilySideTabs.tsx","webpack:///./src/pages/cognitive-challenge-library.tsx","webpack:///./src/components/core/fixed-header-offset.tsx"],"names":["mapEdgesToNodes","data","edges","map","edge","node","getChallengesDictionary","challenges","challenge","i","length","id","getChallengeFamiliesDictionary","familyData","challengeData","challengeFamilies","familyNodes","challengeNodes","familyNode","familyChallenges","filter","family","familyName","addTechToChallenge","challengeId","techId","associatedTech","includes","push","createTabContent","tech","summary","title","text","timetoeffect_optimistic","timetoeffect_likely","timetoeffect_pessimistic","exampleApplications","example_applications","references","tabs","content","overview","implicationsDefenceSecurity","softwareAndAiRequirements","legalEthicalImplications","strategicImpactAssessment","typeOfTechnology","prominentDevelopers","TableHeaders","props","titles","Object","keys","key","className","scope","TableRows","families","selectedTab","header","FamilySideTabs","onClickFamilyTab","onClick","CognitiveChallengeLibrary","useState","currentTab","setCurrentTab","tableTitles","dataJson","challengesLibraryTitles","allCognitiveChallengeFamiliesCsv","allCognitiveChallengesCsv","scrollDivRef","useRef","title-","pageHeader","hasNavbar","familyId","current","scrollTop","scrollLeft","ref","FixedHeaderOffset"],"mappings":"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","file":"component---src-pages-cognitive-challenge-library-tsx-ee1955cddce3c70ccb79.js","sourcesContent":["import {\r\n  TechnologyDictionary,\r\n  Challenge,\r\n  ChallengeDictionary,\r\n  ChallengeFamilyDictionary,\r\n  Technology,\r\n} from '../../types/Global'\r\n\r\nexport function cn(...args: any) {\r\n  return args.filter(Boolean).join(' ')\r\n}\r\n\r\nexport function mapEdgesToNodes(data: any) {\r\n  if (!data.edges) return data ? data : []\r\n  return data.edges.map((edge: any) => edge.node)\r\n}\r\n\r\nexport function getChallengesDictionary(data: any) {\r\n  let challenges: ChallengeDictionary = {}\r\n  if (!data.edges) return data ? data : {}\r\n\r\n  // challenges\r\n  if (data.edges[0].node.challenge) {\r\n    for (let i = 0; i < data.edges.length; i++) {\r\n      challenges[data.edges[i].node.id] = data.edges[i].node\r\n    }\r\n    return challenges\r\n  }\r\n}\r\n\r\nexport function getChallengeFamiliesDictionary(familyData: any, challengeData: any) {\r\n  let challengeFamilies: ChallengeFamilyDictionary = {}\r\n\r\n  if (familyData.edges && challengeData.edges) {\r\n    let familyNodes = mapEdgesToNodes(familyData)\r\n    let challengeNodes = mapEdgesToNodes(challengeData)\r\n\r\n    // challengeFamilies\r\n    for (var familyNode of familyNodes) {\r\n      let familyChallenges = challengeNodes\r\n        .filter((challenge: Challenge) => challenge.family === familyNode.family)\r\n        .map((challenge: Challenge) => {\r\n          return challenge.id\r\n        })\r\n\r\n      challengeFamilies[familyNode.family] = {\r\n        family: familyNode.family,\r\n        familyName: familyNode.familyName,\r\n        challenges: familyChallenges || [],\r\n      }\r\n    }\r\n  }\r\n\r\n  return challengeFamilies\r\n}\r\n\r\nexport function getTechnologyDictionary(data: any) {\r\n  let technologyDictionary: TechnologyDictionary = {}\r\n  if (!data.edges) return data ? data : []\r\n\r\n  if (data.edges[0].node.disruptiveness) {\r\n    for (let i = 0; i < data.edges.length; i++) {\r\n      technologyDictionary[data.edges[i].node.id] = data.edges[i].node\r\n    }\r\n    return technologyDictionary\r\n  }\r\n}\r\n\r\n/**\r\n * ### Adds the techID to the challenge's associatedTech[]\r\n * @param challengeId ID of the challenge\r\n * @param techId Tech instance ID\r\n */\r\nexport function addTechToChallenge(challenges: ChallengeDictionary, challengeId: string, techId: string): void {\r\n  // Creates empty associatedTech\r\n  if (!challenges[challengeId].associatedTech) {\r\n    challenges[challengeId].associatedTech = []\r\n  }\r\n\r\n  // Only adds if the id is not present\r\n  if (!challenges[challengeId].associatedTech!.includes(techId)) {\r\n    challenges[challengeId].associatedTech!.push(techId)\r\n  }\r\n\r\n  return\r\n}\r\n\r\n/**\r\n * ### Returns an array of techIds used to filter by Challenge\r\n * If challenge has no associated tech then [ ] is returned\r\n */\r\nexport const filterByChallenge = (challengeIds: string[], allTechIds: string[]): string[] => {\r\n  let enabledTechIds: string[] = []\r\n\r\n  allTechIds.map((id) => (challengeIds!.includes(id) ? enabledTechIds.push(id) : null))\r\n\r\n  return enabledTechIds\r\n}\r\n\r\nexport const createTabContent = (tech: Technology) => ({\r\n  summary: {\r\n    title: 'Summary',\r\n    text: tech.summary,\r\n    timetoeffect_optimistic: tech.timetoeffect_optimistic,\r\n    timetoeffect_likely: tech.timetoeffect_likely,\r\n    timetoeffect_pessimistic: tech.timetoeffect_pessimistic,\r\n    exampleApplications: tech.example_applications,\r\n    references: tech.references,\r\n  },\r\n  tabs: [\r\n    {\r\n      id: 'overview',\r\n      title: 'Overview',\r\n      content: tech.overview,\r\n    },\r\n    {\r\n      id: 'implicationsDefenceSecurity',\r\n      title: 'Implications for Defence & Security',\r\n      content: tech.implicationsDefenceSecurity,\r\n    },\r\n    {\r\n      id: 'softwareAndAiRequirements',\r\n      title: 'Software / AI Requirements',\r\n      content: tech.softwareAndAiRequirements,\r\n    },\r\n    {\r\n      id: 'legalEthicalImplications',\r\n      title: 'Legal/Ethical Implications',\r\n      content: tech.legalEthicalImplications,\r\n    },\r\n    {\r\n      id: 'strategicImpactAssessment',\r\n      title: 'Strategic DLOD Impact Assessment',\r\n      content: tech.strategicImpactAssessment,\r\n    },\r\n    {\r\n      id: 'typeOfTechnology',\r\n      title: 'Type of Technology',\r\n      content: tech.typeOfTechnology,\r\n    },\r\n    {\r\n      id: 'prominentDevelopers',\r\n      title: 'Prominent Developers',\r\n      content: tech.prominentDevelopers,\r\n    },\r\n  ],\r\n})\r\n","import React from 'react'\r\nimport { ChallengesLibraryTitles } from '../../../types/Global'\r\n\r\ninterface Props {\r\n  titles: ChallengesLibraryTitles\r\n}\r\n\r\nexport const TableHeaders = (props: Props) => {\r\n  const { titles } = props\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        {Object.keys(titles).map((key, i) => (\r\n          <th className={`ccl__all-headers ccl__all-headers__${i}`} scope={i === 0 ? 'col' : 'row'} key={key}>\r\n            <p className={`ccl__all-para`}>{titles[key]}</p>\r\n          </th>\r\n        ))}\r\n      </tr>\r\n    </thead>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Dictionary, ChallengeFamilyDictionary } from '../../../types/Global'\r\n\r\ninterface Props {\r\n  challenges: { [key: string]: Dictionary }\r\n  families: ChallengeFamilyDictionary\r\n  selectedTab: string\r\n}\r\n\r\nexport const TableRows = (props: Props) => {\r\n  const { challenges, families, selectedTab } = props\r\n\r\n  const familyChallenges = families[selectedTab].challenges\r\n\r\n  return (\r\n    <tbody>\r\n      {familyChallenges.map((challengeId) => (\r\n        <tr key={challengeId}>\r\n          {Object.keys(challenges[challengeId]).map((header, i) => {\r\n            if (header === 'id' || header === 'family') return null\r\n            else\r\n              return (\r\n                <td\r\n                  key={header}\r\n                  className={`ccl__${header}__content ccl__all_table_data`}\r\n                  scope={i === 0 ? 'col' : 'row'}\r\n                >\r\n                  {challenges[challengeId][header]}\r\n                </td>\r\n              )\r\n          })}\r\n        </tr>\r\n      ))}\r\n    </tbody>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ChallengeFamilyDictionary } from '../../../types/Global'\r\n\r\ninterface Props {\r\n  families: ChallengeFamilyDictionary\r\n  onClickFamilyTab(familyId: string): void\r\n  selectedTab: string\r\n}\r\n\r\nexport const FamilySideTabs = (props: Props) => {\r\n  const { families, onClickFamilyTab, selectedTab } = props\r\n\r\n  return (\r\n    <>\r\n      {Object.keys(families).map((key) => (\r\n        <div\r\n          onClick={() => onClickFamilyTab(key)}\r\n          key={key}\r\n          className={`ccl__all-family-tabs ccl__family-${key} ${selectedTab === key ? 'ccl__family-selected' : ''}`}\r\n        >\r\n          {families[key].familyName}\r\n        </div>\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n","import React, { useRef, useState } from 'react'\r\nimport Layout from '../components/core/layout'\r\nimport SEO from '../components/core/seo'\r\nimport { graphql } from 'gatsby'\r\nimport { TableHeaders } from '../components/challenges-library/TableHeaders'\r\nimport { TableRows } from '../components/challenges-library/TableRows'\r\nimport { FamilySideTabs } from '../components/challenges-library/FamilySideTabs'\r\nimport { getChallengeFamiliesDictionary, getChallengesDictionary } from '../lib/helpers'\r\nimport {\r\n  ChallengeQueryData,\r\n  ChallengeFamilyDictionary,\r\n  ChallengeFamilyQueryData,\r\n  ChallengesLibraryTitles,\r\n} from '../../types/Global'\r\nimport '../styles/challenge-lib.scss'\r\nimport { FixedHeaderOffset } from '../components/core/fixed-header-offset'\r\n\r\ninterface Props {\r\n  data: {\r\n    dataJson: {\r\n      challengesLibraryTitles: ChallengesLibraryTitles\r\n    }\r\n    allCognitiveChallengesCsv: ChallengeQueryData\r\n    allCognitiveChallengeFamiliesCsv: ChallengeFamilyQueryData\r\n  }\r\n}\r\nexport default function CognitiveChallengeLibrary(props: Props) {\r\n  const onLoadTab = '1'\r\n\r\n  const [currentTab, setCurrentTab] = useState<string>(onLoadTab)\r\n\r\n  const tableTitles = props.data.dataJson.challengesLibraryTitles\r\n\r\n  const families: ChallengeFamilyDictionary = getChallengeFamiliesDictionary(\r\n    props.data.allCognitiveChallengeFamiliesCsv,\r\n    props.data.allCognitiveChallengesCsv\r\n  )\r\n\r\n  const challenges: any = getChallengesDictionary(props.data.allCognitiveChallengesCsv)\r\n\r\n  const onClickFamilyTab = (familyId: string) => {\r\n    if (currentTab !== familyId) {\r\n      setCurrentTab(familyId)\r\n      if (scrollDivRef && scrollDivRef.current) {\r\n        scrollDivRef.current.scrollTop = 0\r\n        scrollDivRef.current.scrollLeft = 0\r\n      }\r\n    }\r\n  }\r\n\r\n  const scrollDivRef = useRef<HTMLDivElement>(null)\r\n  return (\r\n    <Layout title-=\"Aleph HMI\" pageHeader={'Future Cognitive Challenges Table'}>\r\n      <SEO title=\"Future Cognitive Challenges Table\" />\r\n      <FixedHeaderOffset hasNavbar={true} />\r\n      <div className=\"ccl__container\">\r\n        <div className=\"ccl__grid\">\r\n          <p className=\"ccl__para\">\r\n            Select a family of defence-specific challenges on the left to display the corresponding information about\r\n            its individual constituent future challenges.\r\n          </p>\r\n          <FamilySideTabs families={families} onClickFamilyTab={onClickFamilyTab} selectedTab={currentTab} />\r\n          <div className=\"ccl__tech-grid\">\r\n            <div className=\"ccl__table\" ref={scrollDivRef}>\r\n              <table className=\"fixed-header fixed-column-one\">\r\n                <TableHeaders titles={tableTitles} />\r\n                <TableRows challenges={challenges} families={families} selectedTab={currentTab} />\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const challenges = graphql`\r\n  {\r\n    dataJson {\r\n      challengesLibraryTitles {\r\n        challenge\r\n        definition\r\n        scenario\r\n        domain\r\n        horizon\r\n        impact\r\n        valence\r\n        activity\r\n        cognition\r\n        challenges\r\n      }\r\n    }\r\n    allCognitiveChallengeFamiliesCsv {\r\n      edges {\r\n        node {\r\n          family\r\n          familyName\r\n        }\r\n      }\r\n    }\r\n    allCognitiveChallengesCsv {\r\n      edges {\r\n        node {\r\n          challenge\r\n          definition\r\n          scenario\r\n          domain\r\n          horizon\r\n          impact\r\n          valence\r\n          activity\r\n          cognition\r\n          challenges\r\n          id\r\n          family\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from 'react'\r\n\r\nexport interface Props {\r\n  hasNavbar: boolean\r\n}\r\n\r\nexport const FixedHeaderOffset = (props: Props) => {\r\n  const { hasNavbar } = props\r\n  return <div className={hasNavbar ? 'fixed-header-offset-with-navbar' : 'fixed-header-offset'}></div>\r\n}\r\n"],"sourceRoot":""}