{"version":3,"sources":["webpack:///./src/lib/helpers.ts","webpack:///./src/components/challenges-library/TableHeaders.tsx","webpack:///./src/components/challenges-library/TableRows.tsx","webpack:///./src/components/challenges-library/FamilySideTabs.tsx","webpack:///./src/pages/cognitive-challenge-library.tsx","webpack:///./src/components/core/fixed-header-offset.tsx"],"names":["mapEdgesToNodes","data","edges","map","edge","node","getChallengesDictionary","challenges","challenge","i","length","id","getChallengeFamiliesDictionary","familyData","challengeData","challengeFamilies","familyNodes","challengeNodes","familyNode","familyChallenges","filter","family","familyName","addTechToChallenge","challengeId","techId","associatedTech","includes","push","createTabContent","tech","summary","title","text","timetoeffect_optimistic","timetoeffect_likely","timetoeffect_pessimistic","exampleApplications","example_applications","references","tabs","content","overview","implicationsDefenceSecurity","softwareAndAiRequirements","legalEthicalImplications","strategicImpactAssessment","typeOfTechnology","prominentDevelopers","TableHeaders","props","titles","Object","keys","key","className","scope","TableRows","families","selectedTab","header","FamilySideTabs","onClickFamilyTab","onClick","CognitiveChallengeLibrary","useState","currentTab","setCurrentTab","tableTitles","dataJson","challengesLibraryTitles","allCognitiveChallengeFamiliesCsv","allCognitiveChallengesCsv","scrollDivRef","useRef","title-","pageHeader","hasNavbar","familyId","current","scrollTop","scrollLeft","ref","FixedHeaderOffset"],"mappings":"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","file":"component---src-pages-cognitive-challenge-library-tsx-54560c28727eb28b24af.js","sourcesContent":["import {\n  TechnologyDictionary,\n  Challenge,\n  ChallengeDictionary,\n  ChallengeFamilyDictionary,\n  Technology,\n} from '../../types/Global'\n\nexport function cn(...args: any) {\n  return args.filter(Boolean).join(' ')\n}\n\nexport function mapEdgesToNodes(data: any) {\n  if (!data.edges) return data ? data : []\n  return data.edges.map((edge: any) => edge.node)\n}\n\nexport function getChallengesDictionary(data: any) {\n  let challenges: ChallengeDictionary = {}\n  if (!data.edges) return data ? data : {}\n\n  // challenges\n  if (data.edges[0].node.challenge) {\n    for (let i = 0; i < data.edges.length; i++) {\n      challenges[data.edges[i].node.id] = data.edges[i].node\n    }\n    return challenges\n  }\n}\n\nexport function getChallengeFamiliesDictionary(familyData: any, challengeData: any) {\n  let challengeFamilies: ChallengeFamilyDictionary = {}\n\n  if (familyData.edges && challengeData.edges) {\n    let familyNodes = mapEdgesToNodes(familyData)\n    let challengeNodes = mapEdgesToNodes(challengeData)\n\n    // challengeFamilies\n    for (var familyNode of familyNodes) {\n      let familyChallenges = challengeNodes\n        .filter((challenge: Challenge) => challenge.family === familyNode.family)\n        .map((challenge: Challenge) => {\n          return challenge.id\n        })\n\n      challengeFamilies[familyNode.family] = {\n        family: familyNode.family,\n        familyName: familyNode.familyName,\n        challenges: familyChallenges || [],\n      }\n    }\n  }\n\n  return challengeFamilies\n}\n\nexport function getTechnologyDictionary(data: any) {\n  let technologyDictionary: TechnologyDictionary = {}\n  if (!data.edges) return data ? data : []\n\n  if (data.edges[0].node.disruptiveness) {\n    for (let i = 0; i < data.edges.length; i++) {\n      technologyDictionary[data.edges[i].node.id] = data.edges[i].node\n    }\n    return technologyDictionary\n  }\n}\n\n/**\n * ### Adds the techID to the challenge's associatedTech[]\n * @param challengeId ID of the challenge\n * @param techId Tech instance ID\n */\nexport function addTechToChallenge(challenges: ChallengeDictionary, challengeId: string, techId: string): void {\n  // Creates empty associatedTech\n  if (!challenges[challengeId].associatedTech) {\n    challenges[challengeId].associatedTech = []\n  }\n\n  // Only adds if the id is not present\n  if (!challenges[challengeId].associatedTech!.includes(techId)) {\n    challenges[challengeId].associatedTech!.push(techId)\n  }\n\n  return\n}\n\n/**\n * ### Returns an array of techIds used to filter by Challenge\n * If challenge has no associated tech then [ ] is returned\n */\nexport const filterByChallenge = (challengeIds: string[], allTechIds: string[]): string[] => {\n  let enabledTechIds: string[] = []\n\n  allTechIds.map((id) => (challengeIds!.includes(id) ? enabledTechIds.push(id) : null))\n\n  return enabledTechIds\n}\n\nexport const createTabContent = (tech: Technology) => ({\n  summary: {\n    title: 'Summary',\n    text: tech.summary,\n    timetoeffect_optimistic: tech.timetoeffect_optimistic,\n    timetoeffect_likely: tech.timetoeffect_likely,\n    timetoeffect_pessimistic: tech.timetoeffect_pessimistic,\n    exampleApplications: tech.example_applications,\n    references: tech.references,\n  },\n  tabs: [\n    {\n      id: 'overview',\n      title: 'Overview',\n      content: tech.overview,\n    },\n    {\n      id: 'implicationsDefenceSecurity',\n      title: 'Implications for Defence & Security',\n      content: tech.implicationsDefenceSecurity,\n    },\n    {\n      id: 'softwareAndAiRequirements',\n      title: 'Software / AI Requirements',\n      content: tech.softwareAndAiRequirements,\n    },\n    {\n      id: 'legalEthicalImplications',\n      title: 'Legal/Ethical Implications',\n      content: tech.legalEthicalImplications,\n    },\n    {\n      id: 'strategicImpactAssessment',\n      title: 'Strategic DLOD Impact Assessment',\n      content: tech.strategicImpactAssessment,\n    },\n    {\n      id: 'typeOfTechnology',\n      title: 'Type of Technology',\n      content: tech.typeOfTechnology,\n    },\n    {\n      id: 'prominentDevelopers',\n      title: 'Prominent Developers',\n      content: tech.prominentDevelopers,\n    },\n  ],\n})\n","import React from 'react'\nimport { ChallengesLibraryTitles } from '../../../types/Global'\n\ninterface Props {\n  titles: ChallengesLibraryTitles\n}\n\nexport const TableHeaders = (props: Props) => {\n  const { titles } = props\n  return (\n    <thead>\n      <tr>\n        {Object.keys(titles).map((key, i) => (\n          <th className={`ccl__all-headers ccl__all-headers__${i}`} scope={i === 0 ? 'col' : 'row'} key={key}>\n            <p className={`ccl__all-para`}>{titles[key]}</p>\n          </th>\n        ))}\n      </tr>\n    </thead>\n  )\n}\n","import React from 'react'\nimport { Dictionary, ChallengeFamilyDictionary } from '../../../types/Global'\n\ninterface Props {\n  challenges: { [key: string]: Dictionary }\n  families: ChallengeFamilyDictionary\n  selectedTab: string\n}\n\nexport const TableRows = (props: Props) => {\n  const { challenges, families, selectedTab } = props\n\n  const familyChallenges = families[selectedTab].challenges\n\n  return (\n    <tbody>\n      {familyChallenges.map((challengeId) => (\n        <tr key={challengeId}>\n          {Object.keys(challenges[challengeId]).map((header, i) => {\n            if (header === 'id' || header === 'family') return null\n            else\n              return (\n                <td\n                  key={header}\n                  className={`ccl__${header}__content ccl__all_table_data`}\n                  scope={i === 0 ? 'col' : 'row'}\n                >\n                  {challenges[challengeId][header]}\n                </td>\n              )\n          })}\n        </tr>\n      ))}\n    </tbody>\n  )\n}\n","import React from 'react'\nimport { ChallengeFamilyDictionary } from '../../../types/Global'\n\ninterface Props {\n  families: ChallengeFamilyDictionary\n  onClickFamilyTab(familyId: string): void\n  selectedTab: string\n}\n\nexport const FamilySideTabs = (props: Props) => {\n  const { families, onClickFamilyTab, selectedTab } = props\n\n  return (\n    <>\n      {Object.keys(families).map((key) => (\n        <div\n          onClick={() => onClickFamilyTab(key)}\n          key={key}\n          className={`ccl__all-family-tabs ccl__family-${key} ${selectedTab === key ? 'ccl__family-selected' : ''}`}\n        >\n          {families[key].familyName}\n        </div>\n      ))}\n    </>\n  )\n}\n","import React, { useRef, useState } from 'react'\nimport Layout from '../components/core/layout'\nimport SEO from '../components/core/seo'\nimport { graphql } from 'gatsby'\nimport { TableHeaders } from '../components/challenges-library/TableHeaders'\nimport { TableRows } from '../components/challenges-library/TableRows'\nimport { FamilySideTabs } from '../components/challenges-library/FamilySideTabs'\nimport { getChallengeFamiliesDictionary, getChallengesDictionary } from '../lib/helpers'\nimport {\n  ChallengeQueryData,\n  ChallengeFamilyDictionary,\n  ChallengeFamilyQueryData,\n  ChallengesLibraryTitles,\n} from '../../types/Global'\nimport '../styles/challenge-lib.scss'\nimport { FixedHeaderOffset } from '../components/core/fixed-header-offset'\n\ninterface Props {\n  data: {\n    dataJson: {\n      challengesLibraryTitles: ChallengesLibraryTitles\n    }\n    allCognitiveChallengesCsv: ChallengeQueryData\n    allCognitiveChallengeFamiliesCsv: ChallengeFamilyQueryData\n  }\n}\nexport default function CognitiveChallengeLibrary(props: Props) {\n  const onLoadTab = '1'\n\n  const [currentTab, setCurrentTab] = useState<string>(onLoadTab)\n\n  const tableTitles = props.data.dataJson.challengesLibraryTitles\n\n  const families: ChallengeFamilyDictionary = getChallengeFamiliesDictionary(\n    props.data.allCognitiveChallengeFamiliesCsv,\n    props.data.allCognitiveChallengesCsv\n  )\n\n  const challenges: any = getChallengesDictionary(props.data.allCognitiveChallengesCsv)\n\n  const onClickFamilyTab = (familyId: string) => {\n    if (currentTab !== familyId) {\n      setCurrentTab(familyId)\n      if (scrollDivRef && scrollDivRef.current) {\n        scrollDivRef.current.scrollTop = 0\n        scrollDivRef.current.scrollLeft = 0\n      }\n    }\n  }\n\n  const scrollDivRef = useRef<HTMLDivElement>(null)\n  return (\n    <Layout title-=\"Aleph HMI\" pageHeader={'Future Cognitive Challenges Table'}>\n      <SEO title=\"Future Cognitive Challenges Table\" />\n      <FixedHeaderOffset hasNavbar={true} />\n      <div className=\"ccl__container\">\n        <div className=\"ccl__grid\">\n          <p className=\"ccl__para\">\n            Select a family of defence-specific challenges on the left to display the corresponding information about\n            its individual constituent future challenges.\n          </p>\n          <FamilySideTabs families={families} onClickFamilyTab={onClickFamilyTab} selectedTab={currentTab} />\n          <div className=\"ccl__tech-grid\">\n            <div className=\"ccl__table\" ref={scrollDivRef}>\n              <table className=\"fixed-header fixed-column-one\">\n                <TableHeaders titles={tableTitles} />\n                <TableRows challenges={challenges} families={families} selectedTab={currentTab} />\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport const challenges = graphql`\n  {\n    dataJson {\n      challengesLibraryTitles {\n        challenge\n        definition\n        scenario\n        domain\n        horizon\n        impact\n        valence\n        activity\n        cognition\n        challenges\n      }\n    }\n    allCognitiveChallengeFamiliesCsv {\n      edges {\n        node {\n          family\n          familyName\n        }\n      }\n    }\n    allCognitiveChallengesCsv {\n      edges {\n        node {\n          challenge\n          definition\n          scenario\n          domain\n          horizon\n          impact\n          valence\n          activity\n          cognition\n          challenges\n          id\n          family\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\n\nexport interface Props {\n  hasNavbar: boolean\n}\n\nexport const FixedHeaderOffset = (props: Props) => {\n  const { hasNavbar } = props\n  return <div className={hasNavbar ? 'fixed-header-offset-with-navbar' : 'fixed-header-offset'}></div>\n}\n"],"sourceRoot":""}