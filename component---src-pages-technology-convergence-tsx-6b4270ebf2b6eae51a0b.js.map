{"version":3,"sources":["webpack:///./src/pages/technology-convergence.tsx"],"names":["TechnologyConvergence","props","data","technologies","mapEdgesToNodes","allTechnologiesCsv","technologyImages","useState","explicitlyEnabledIds","setExplicitlyEnabled","enabledTechnologies","simpleFilterTechnologies","submitEnabled","length","resetEnabled","title-","pageHeader","title","hasNavbar","className","map","tech","technologyImage","find","image","name","icon","imageData","getImage","key","id","onClick","techId","isExplicityEnabled","includes","filter","c","data-tip","data-iscapture","style","opacity","alt","navToTechPage","slug","window","open","withPrefix","disabled","some","params","forEach","concat","replace","navigate"],"mappings":"kRAkBe,SAASA,EAAsBC,GAAc,IAClDC,EAASD,EAATC,KAKFC,EAA6BC,YAAgBF,EAAKG,oBAClDC,EAAmBF,YAAgBH,EAAMC,KAAKI,kBAPM,EASLC,mBAAmB,IAAjEC,EATmD,KAS7BC,EAT6B,KAYpDC,EAAsBC,YAAyBR,EAAcK,GAE7DI,EAAgBF,EAAoBG,QAVnB,GAU+CH,EAAoBG,QAXnE,EAYjBC,EAAeJ,EAAoBG,OAAS,EAsClD,OACE,kBAAC,IAAD,CAAQE,SAAO,YAAYC,WAAY,mCACrC,kBAAC,IAAD,CAAKC,MAAM,2BACX,kBAAC,IAAD,CAAmBC,WAAW,IAC9B,yBAAKC,UAAU,eACb,yBAAKA,UAAU,0BAAf,6NAKA,yBAAKA,UAAW,wBACbhB,EAAaiB,KAAI,SAACC,GACjB,IAAMC,EAAkBhB,EAAiBiB,MAAK,SAACC,GAAD,OAAgBA,EAAMC,OAASJ,EAAKK,QAElF,IAAKJ,EAAiB,OAAO,KAE7B,IAAIK,EAAYC,YAASN,GAEzB,OACE,yBAAKO,IAAKR,EAAKS,GAAIX,UAAU,0BAC3B,yBAAKA,UAAU,+BACb,yBAAKY,QAAS,kBArDLC,EAqD2BX,EAAKS,GApDjDG,EAAqBzB,EAAqB0B,SAASF,QAGvDvB,EADEwB,EACmBzB,EAAqB2B,QAAO,SAACC,GAAD,OAAOA,IAAMJ,KAEzC,GAAD,mBAAKxB,GAAL,CAA2BwB,KAN3B,IAACA,EACjBC,GAoDsDI,WAAUhB,EAAKJ,OAAS,GAAIqB,iBAAe,QACvF,kBAAC,IAAD,CACEC,MAAO,CAAEC,QAAShC,EAAqB0B,SAASb,EAAKS,IAAM,EAAI,IAC/DN,MAAOG,EACPc,IAAKpB,EAAKJ,SAGd,4BACEE,UAAU,iCACVY,QAAS,kBAhDFW,EAgDwBrB,EAAKsB,UA/CpDC,OAAOC,KAAKC,qBAAW,eAAeJ,GAAkB,UADlC,IAACA,GAiDPK,UAAWrC,EAAoBsC,MAAK,SAAClB,GAAD,OAAQA,IAAOT,EAAKS,OAEvDT,EAAKJ,cAQpB,yBAAKE,UAAU,8BACb,4BAAQ4B,UAAWjC,EAAciB,QAAS,WA7C9CtB,EAAqB,KA6C+C8B,MAAO,CAAEC,QAAU1B,EAAqB,EAAN,KAAlG,SAGA,4BAAQiC,UAAWnC,EAAemB,QAAS,kBA1D3CkB,EAAiB,GAErBvC,EAAoBwC,SAAQ,SAACpB,GAC3BmB,EAASA,EAAOE,OAAUrB,EAAjB,QAEXmB,EAASA,EAAOG,QAAQ,MAAO,SAC/BC,mBAAS,sDAAsDJ,GAP3C,IAChBA,GA0DkEV,MAAO,CAAEC,QAAU5B,EAAsB,EAAN,KAArG,c","file":"component---src-pages-technology-convergence-tsx-6b4270ebf2b6eae51a0b.js","sourcesContent":["import React, { useState } from 'react'\r\nimport Layout from '../components/core/layout'\r\nimport SEO from '../components/core/seo'\r\nimport { graphql, navigate, withPrefix } from 'gatsby'\r\nimport { Technology, TechnologyQueryData } from '../../types/Global'\r\nimport { mapEdgesToNodes } from '../lib/helpers'\r\nimport { simpleFilterTechnologies } from '../components/technology-selector/filter-tech'\r\nimport { FileNode } from 'gatsby-plugin-image/dist/src/components/hooks'\r\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\r\nimport '../styles/tech-convergance.scss'\r\nimport { FixedHeaderOffset } from '../components/core/fixed-header-offset'\r\ninterface Props {\r\n  data: {\r\n    allTechnologiesCsv: TechnologyQueryData[]\r\n    technologyImages: FileNode[]\r\n  }\r\n}\r\n\r\nexport default function TechnologyConvergence(props: Props) {\r\n  const { data } = props\r\n  // This is the max and min number of tech to compare\r\n  const techCompareMax = 5\r\n  const techCompareMin = 1\r\n\r\n  const technologies: Technology[] = mapEdgesToNodes(data.allTechnologiesCsv)\r\n  const technologyImages = mapEdgesToNodes(props.data.technologyImages)\r\n\r\n  const [explicitlyEnabledIds, setExplicitlyEnabled] = useState<string[]>([])\r\n\r\n  // Calculate the current available techs\r\n  const enabledTechnologies = simpleFilterTechnologies(technologies, explicitlyEnabledIds)\r\n\r\n  const submitEnabled = enabledTechnologies.length >= techCompareMin && enabledTechnologies.length <= techCompareMax\r\n  const resetEnabled = enabledTechnologies.length > 0\r\n\r\n  /**\r\n   * When a specific technology is selected - remove it from view\r\n   * @param techId\r\n   */\r\n  const onClickTechItem = (techId: string): void => {\r\n    const isExplicityEnabled = explicitlyEnabledIds.includes(techId)\r\n\r\n    if (isExplicityEnabled) {\r\n      setExplicitlyEnabled(explicitlyEnabledIds.filter((c) => c !== techId))\r\n    } else {\r\n      setExplicitlyEnabled([...explicitlyEnabledIds, techId])\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send user to the tech details page when they click on \"To Library Page\"\r\n   * @param navToTechPage Tech name to link to page\r\n   */\r\n  const onClickTechLink = (navToTechPage: string) => {\r\n    window.open(withPrefix(`/technology/${navToTechPage}`), '_blank')\r\n  }\r\n\r\n  const onClickSubmit = () => {\r\n    let params: string = ''\r\n\r\n    enabledTechnologies.forEach((id) => {\r\n      params = params.concat(`${id},`)\r\n    })\r\n    params = params.replace(/\\,$/, '')\r\n    navigate(`/technology-convergence-visualisation?technologies=${params}`)\r\n  }\r\n\r\n  const onClickReset = () => {\r\n    setExplicitlyEnabled([])\r\n  }\r\n\r\n  return (\r\n    <Layout title-=\"Aleph HMI\" pageHeader={'Technology Convergence Timeline'}>\r\n      <SEO title=\"Technology Convergence\" />\r\n      <FixedHeaderOffset hasNavbar={true} />\r\n      <div className=\"tech-conver\">\r\n        <div className=\"tech-conver__header-GI\">\r\n          Choose from technologies below to generate a visualisation showing how these technologies could combine with\r\n          others to produce new integrated capabilities in the future. Select up to five technologies and then submit.\r\n        </div>\r\n\r\n        <div className={'tech-conver__main-GI'}>\r\n          {technologies.map((tech) => {\r\n            const technologyImage = technologyImages.find((image: any) => image.name === tech.icon)\r\n\r\n            if (!technologyImage) return null\r\n\r\n            let imageData = getImage(technologyImage)!\r\n\r\n            return (\r\n              <div key={tech.id} className=\"tech-conver__grid-item\">\r\n                <div className=\"tech-conver__tech-container\">\r\n                  <div onClick={() => onClickTechItem(tech.id)} data-tip={tech.title || ''} data-iscapture=\"true\">\r\n                    <GatsbyImage\r\n                      style={{ opacity: explicitlyEnabledIds.includes(tech.id) ? 1 : 0.2 }}\r\n                      image={imageData}\r\n                      alt={tech.title}\r\n                    />\r\n                  </div>\r\n                  <button\r\n                    className=\"tech-conver__tech-click-button\"\r\n                    onClick={() => onClickTechLink(tech.slug)}\r\n                    disabled={!enabledTechnologies.some((id) => id === tech.id)}\r\n                  >\r\n                    {tech.title}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n      <div className=\"tech-conver__buttons-right\">\r\n        <button disabled={!resetEnabled} onClick={() => onClickReset()} style={{ opacity: !resetEnabled ? 0.3 : 1 }}>\r\n          Reset\r\n        </button>\r\n        <button disabled={!submitEnabled} onClick={() => onClickSubmit()} style={{ opacity: !submitEnabled ? 0.3 : 1 }}>\r\n          Submit\r\n        </button>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const TechnologyQuery = graphql`\r\n  query {\r\n    allTechnologiesCsv {\r\n      edges {\r\n        node {\r\n          id\r\n          icon\r\n          title\r\n          slug\r\n        }\r\n      }\r\n    }\r\n    technologyImages: allFile(filter: { relativePath: { regex: \"image/black/png/\" } }) {\r\n      edges {\r\n        node {\r\n          name\r\n          childImageSharp {\r\n            gatsbyImageData(layout: FULL_WIDTH, placeholder: TRACED_SVG)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}