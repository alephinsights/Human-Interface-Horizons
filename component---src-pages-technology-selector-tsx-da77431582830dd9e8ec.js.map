{"version":3,"sources":["webpack:///./src/components/technology-selector/SideBarButton.tsx","webpack:///./src/components/technology-selector/Sidebar.tsx","webpack:///./src/components/technology-selector/FamilyChallengeView.tsx","webpack:///./src/components/technology-selector/FamilyCardView.tsx","webpack:///./src/components/technology-selector/FamilyCards.tsx","webpack:///./src/components/technology-selector/SubmitButton.tsx","webpack:///./src/components/technology-selector/ResetButton.tsx","webpack:///./src/components/technology-selector/TechnologyCard.tsx","webpack:///./src/components/technology-selector/TechnologyCards.tsx","webpack:///./src/pages/technology-selector.tsx"],"names":["SidebarButton","props","groupTitle","index","title","isActive","onClickSideBarItem","key","className","onClick","style","border","color","backgroundColor","Sidebar","sideBarItemTitles","disruptiveDictionary","sensoryDictionary","environmentDictionary","Object","keys","map","i","titles","includes","FamilyChallengeView","name","active","onPress","FamilyCardView","family","familyId","allChallenges","onFamilyPress","isFamilyActive","cardHeaderHeight","onChallengePress","activeChallengeIds","onSetCardHeaderHeight","id","ref","height","familyName","challenges","challenge","some","FamilyCards","activeFamilies","activeChallenges","challengeFamilies","onChallengeFamilyPress","SubmitButton","onClickSubmit","isSubmitDisabled","buttonText","disabled","opacity","onClickReset","isResetDisabled","TechnologyCard","technology","isTechDisabled","isExplicitlyEnabled","isExplicitlyDisabled","onPressLink","showHideIcon","imageData","getImage","technologyImage","data-tip","data-iscapture","image","alt","slug","TechnologyCards","technologies","tech","technologyImages","find","icon","onClickTechItem","onClickTechLink","explicitlyDisabledIds","explicitlyEnabledIds","enabledTechIds","TechSelectorPage","data","useState","cardHeaders","setCardHeaders","setActiveFamilies","setCardHeaderHeight","setActiveChallenges","setExplicitlyEnabled","disabledTechnologyIds","setDisabledTechnologyIds","sideBarTitles","setSideBarTitles","window","innerHeight","width","innerWidth","React","dimensions","setDimensions","handleResize","fn","ms","timer","clearTimeout","setTimeout","x","apply","arguments","location","reload","useEffect","resizeListener","addEventListener","removeEventListener","techCompareMax","techCompareMin","mapEdgesToNodes","allTechnologiesCsv","getChallengeFamiliesDictionary","allCognitiveChallengeFamiliesCsv","allCognitiveChallengesCsv","getChallengesDictionary","challengeToTechnologyLinkages","allChallengeTechnologyLinkagesCsv","techChallenges","filter","linkage","Technology_Name","Linked_0_1","challengeObject","values","Individual_Cognitive_Challenge_Short_Name","forEach","challengeId","addTechToChallenge","techDisruptiveness","disruptiveness","match","associatedTech","push","techSensory","sensory","techEnvironment","environment","enabledTechnologies","filterTechnologies","submitEnabled","length","resetEnabled","challengesInFamily","isChallengeActive","counter","editedChallenges","c","wholeFamilySelected","familyAlreadyActive","e","familyChallengeIds","inactiveChallengesFromFamily","familyChallengeId","ac","button","editedTitles","t","removeSideBarItemTitleFromArray","addSideBarItemTitleToArray","techId","isDisabled","isExplicityEnabled","navToTechPage","open","withPrefix","params","concat","replace","navigate","clientHeight","highest","refId","title-","pageHeader","hasNavbar"],"mappings":"gOAUaA,EAAgB,SAACC,GACuCA,EAA3DC,WADqC,IACzBC,EAA+CF,EAA/CE,MAAOC,EAAwCH,EAAxCG,MAAOC,EAAiCJ,EAAjCI,SAAUC,EAAuBL,EAAvBK,mBAE5C,OACE,4BACEC,IAAG,GAAKH,EAAQD,EAChBK,UAAU,iBACVC,QAAS,kBAAMH,EAAmB,CAAEF,MAAOA,GAASC,IACpDK,MACEL,EACI,CAAEM,OAAQ,oBAAqBC,MAAO,QAASC,gBAAiB,WAChE,CAAEF,OAAQ,oBAAqBE,gBAAiB,QAASD,MAAO,UAGrER,ICZQ,SAASU,EAAQb,GAAc,IACpCc,EAA0Gd,EAA1Gc,kBAAmBC,EAAuFf,EAAvFe,qBAAsBC,EAAiEhB,EAAjEgB,kBAAmBC,EAA8CjB,EAA9CiB,sBAAuBZ,EAAuBL,EAAvBK,mBAE3F,OACE,6BACE,yBAAKE,UAAU,qBACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,kBAAf,kBACCW,OAAOC,KAAKJ,GAAsBK,KAAI,SAACjB,EAAOkB,GAC7C,IAAMjB,EAAWU,EAAkBQ,OAAOC,SAASpB,GACnD,OACE,kBAAC,EAAD,CACED,MAAOmB,EACPf,IAAG,GAAKH,EAAQkB,EAChBjB,SAAUA,EACVD,MAAOA,EACPF,WAAY,iBACZI,mBAAoBA,QAK5B,yBAAKE,UAAU,mBACb,yBAAKA,UAAU,kBAAf,WACCW,OAAOC,KAAKH,GAAmBI,KAAI,SAACjB,EAAOkB,GAC1C,IAAMjB,EAAWU,EAAkBQ,OAAOC,SAASpB,GACnD,OACE,kBAAC,EAAD,CACED,MAAOmB,EACPf,IAAG,GAAKH,EAAQkB,EAChBjB,SAAUA,EACVD,MAAOA,EACPF,WAAY,UACZI,mBAAoBA,QAK5B,yBAAKE,UAAU,mBACb,yBAAKA,UAAU,kBAAf,eACCW,OAAOC,KAAKF,GAAuBG,KAAI,SAACjB,EAAOkB,GAC9C,IAAMjB,EAAWU,EAAkBQ,OAAOC,SAASpB,GACnD,OACE,kBAAC,EAAD,CACED,MAAOmB,EACPf,IAAG,GAAKH,EAAQkB,EAChBjB,SAAUA,EACVD,MAAOA,EACPF,WAAY,cACZI,mBAAoBA,UCrD7B,SAASmB,EAAoBxB,GAAiC,IAC3DyB,EAA0BzB,EAA1ByB,KAAMC,EAAoB1B,EAApB0B,OAAQC,EAAY3B,EAAZ2B,QAEhBpB,EAAYmB,EAAS,4BAA8B,qBACzD,OACE,uBAAGnB,UAAWA,EAAWC,QAASmB,GAC/BF,GCCA,SAASG,EAAe5B,GAA4B,IAEvD6B,EASE7B,EATF6B,OACAC,EAQE9B,EARF8B,SACAC,EAOE/B,EAPF+B,cACAC,EAMEhC,EANFgC,cACAC,EAKEjC,EALFiC,eACAC,EAIElC,EAJFkC,iBACAC,EAGEnC,EAHFmC,iBACAC,EAEEpC,EAFFoC,mBACAC,EACErC,EADFqC,sBA4BF,OAxBE,yBAAK9B,UAAW0B,EAAiB,qBAAuB,eACtD,wBACEK,GAAIR,EACJvB,UAAW0B,EAAiB,SAAW,GACvCM,IAAK,SAACA,GAAD,OAAUA,EAAMF,EAAsBE,GAAO,MAClD/B,QAAS,kBAAMwB,aAAN,EAAMA,EAAgBF,IAC/BrB,MAAO,CAAE+B,OAAQN,GAAoB,gBAEpCL,EAAOY,YAETZ,EAAOa,WAAWtB,KAAI,SAACuB,GACtB,IAAMjB,EAASU,EAAmBQ,MAAK,SAACN,GAAD,OAAQA,IAAOK,KACtD,OACE,kBAACnB,EAAD,CACElB,IAAKqC,EACLjB,OAAQA,EACRD,KAAMM,EAAcY,GAAWA,UAC/BhB,QAAS,kBAAMQ,EAAiBQ,EAAWb,UC/BxC,SAASe,EAAY7C,GAAyB,IAEzD+B,EAQE/B,EARF+B,cACAe,EAOE9C,EAPF8C,eACAZ,EAMElC,EANFkC,iBACAC,EAKEnC,EALFmC,iBACAY,EAIE/C,EAJF+C,iBACAC,EAGEhD,EAHFgD,kBACAX,EAEErC,EAFFqC,sBACAY,EACEjD,EADFiD,uBAGF,OACE,yBAAK1C,UAAU,4BACZW,OAAOC,KAAK6B,GAAmB5B,KAAI,SAACkB,GAAD,OAClC,kBAACV,EAAD,CACEtB,IAAKgC,EACLR,SAAUQ,EACVP,cAAeA,EACfF,OAAQmB,EAAkBV,GAC1BH,iBAAkBA,EAClBD,iBAAkBA,EAClBE,mBAAoBW,EACpBf,cAAeiB,EACfZ,sBAAuBA,EACvBJ,iBAAgBa,EAAevB,SAASe,SChCnC,SAASY,EAAalD,GAAc,IACzCmD,EAAgDnD,EAAhDmD,cAAeC,EAAiCpD,EAAjCoD,iBAAkBC,EAAerD,EAAfqD,WAEzC,OACE,4BACEC,SAAUF,EACV7C,UAAU,0BACVC,QAAS,kBAAM2C,KACf1C,MAAO,CAAE8C,QAASH,EAAmB,GAAM,IAE1CC,GCVQ,SAASH,EAAalD,GAAc,IACzCwD,EAA8CxD,EAA9CwD,aAAcC,EAAgCzD,EAAhCyD,gBAAiBJ,EAAerD,EAAfqD,WAEvC,OACE,4BACEC,SAAUG,EACVlD,UAAU,yBACVC,QAAS,kBAAMgD,KACf/C,MAAO,CAAE8C,QAASE,EAAkB,GAAM,IAEzCJ,G,gBCHMK,EAAiB,SAAC1D,GAAiB,IACtC2D,EAAgG3D,EAAhG2D,WAAYC,EAAoF5D,EAApF4D,eAAgBC,EAAoE7D,EAApE6D,oBAAqBC,EAA+C9D,EAA/C8D,qBAAsBnC,EAAyB3B,EAAzB2B,QAASoC,EAAgB/D,EAAhB+D,YAElFC,EAAe,uBAAsBJ,EAAiB,YAAc,KACxEE,EAAuB,YAAc,KACpCD,EAAsB,oBAAsB,IAE3CI,EAAYC,YAASlE,EAAMmE,iBAE/B,OACE,yBAAK5D,UAAU,iBAAiBD,IAAKqD,EAAWrB,IAC9C,yBAAK9B,QAAS,kBAAMmB,EAAQgC,EAAWrB,KAAK8B,WAAUT,EAAWxD,OAAS,GAAIkE,iBAAe,QAC3F,kBAAC,IAAD,CAAa9D,UAAWyD,EAAcM,MAAOL,EAAWM,IAAKZ,EAAWxD,SAE1E,4BAAQI,UAAU,oBAAoBC,QAAS,kBAAMuD,EAAYJ,EAAWa,QACzEb,EAAWxD,SCfL,SAASsE,EAAgBzE,GACtC,OACE,yBAAKO,UAAU,qBACZP,EAAM0E,aAAatD,KAAI,SAACuD,GACvB,IAAMR,EAAkBnE,EAAM4E,iBAAiBC,MAAK,SAACP,GAAD,OAAgBA,EAAM7C,OAASkD,EAAKG,QACxF,OAAKX,EAIH,kBAAC,EAAD,CACE7D,IAAKqE,EAAKrC,GACVX,QAAS3B,EAAM+E,gBACfhB,YAAa/D,EAAMgF,gBACnBrB,WAAYgB,EACZR,gBAAiBA,EACjBL,qBAAsB9D,EAAMiF,sBAAsB1D,SAASoD,EAAKrC,IAChEuB,oBAAqB7D,EAAMkF,qBAAqB3D,SAASoD,EAAKrC,IAC9DsB,gBAAiB5D,EAAMmF,eAAevC,MAAK,SAACN,GAAD,OAAQA,IAAOqC,EAAKrC,QAX1D,S,sCC2BF,SAAS8C,EAAiBpF,GAAc,gBAC7CqF,EAASrF,EAATqF,KAD6C,EAIfC,mBAAsB,IAArDC,EAJ8C,KAIjCC,EAJiC,OAKTF,mBAAmB,IAAxDxC,EAL8C,KAK9B2C,EAL8B,OAMLH,mBAAiB,GAA1DpD,EAN8C,KAM5BwD,EAN4B,OAOLJ,mBAAmB,IAA5DvC,EAP8C,KAO5B4C,EAP4B,OAQAL,mBAAmB,IAAjEJ,EAR8C,KAQxBU,EARwB,OASKN,mBAAmB,IAAtEO,EAT8C,KASvBC,EATuB,OAUXR,mBAA+B,CAAEhE,OAAQ,KAA5EyE,EAV8C,KAU/BC,EAV+B,KAY/CxD,EAA0B,oBAAVyD,OAAwBA,OAAOC,YAAc,KAC7DC,EAAyB,oBAAVF,OAAwBA,OAAOG,WAAa,KAbZ,EAejBC,IAAMf,SAAS,CACjD9C,OAAQA,EACR2D,MAAOA,IAFFG,EAf8C,KAelCC,EAfkC,KAoB/CC,EAAe,SAACC,EAAcC,GAClC,IAAIC,EACJ,OAAO,WACLC,aAAaD,GACbA,EAAQE,YAAW,SAACC,GAClBH,EAAQ,KACRF,EAAGM,MAAMD,EAAGE,GACZf,OAAOgB,SAASC,WACfR,KAIPS,qBAAU,WACR,IAAMC,EAAiBZ,GAAa,WAClCD,EAAc,CACZ/D,OAAQyD,OAAOC,YACfC,MAAOF,OAAOG,eAEf,KAEH,OADAH,OAAOoB,iBAAiB,SAAUD,GAC3B,WACLnB,OAAOqB,oBAAoB,SAAUF,MAEtC,CAACd,IAGJ,IAAMiB,EAAiB,EACjBC,EAAiB,EAGjB9C,EAA6B+C,YAAgBpC,EAAKqC,oBAClD1E,EAA+C2E,YACnDtC,EAAKuC,iCACLvC,EAAKwC,2BAEDnF,EAAkCoF,YAAwBzC,EAAKwC,2BAG/DjD,EAAmB6C,YAAgBzH,EAAMqF,KAAKT,kBAG9C7D,EAA8C,GAC9CC,EAA2C,GAC3CC,EAA+C,GAE/C8G,EAA8DN,YAClEzH,EAAMqF,KAAK2C,mCAGbtD,EAAatD,KAAI,SAACuD,GAChB,IAAIsD,EAAiBF,EAClBG,QAEC,SAACC,GAAD,OAAyCA,EAAQC,kBAAoBzD,EAAKxE,OAAgC,MAAvBgI,EAAQE,cAE5FjH,KAEC,SAAC+G,GAEC,IAAIG,EAAkBpH,OAAOqH,OAAO7F,GAAYmC,MAC9C,SAACyD,GAAD,OACEA,EAAgB3F,YAAcwF,EAAQK,6CAG1C,OAAOF,aAAP,EAAOA,EAAiBhG,MAI1B2F,GACFA,EAAeQ,SAAQ,SAACC,GAClBA,GACFC,YAAmBjG,EAAYgG,EAAa/D,EAAKrC,OAKvD,IAAIsG,EAAsCjE,EAAKkE,eAAeC,MAAM,UAChEF,GACFA,EAAmBH,SAAQ,SAACI,GACrB9H,EAAqB8H,KACxB9H,EAAqB8H,GAAkB,CAAEE,eAAgB,KAE3DhI,EAAqB8H,GAAgBE,eAAeC,KAAKrE,EAAKrC,OAIlE,IAAI2G,EAA+BtE,EAAKuE,QAAQJ,MAAM,UAClDG,GACFA,EAAYR,SAAQ,SAACS,GACdlI,EAAkBkI,KACrBlI,EAAkBkI,GAAW,CAAEH,eAAgB,KAEjD/H,EAAkBkI,GAASH,eAAeC,KAAKrE,EAAKrC,OAIxD,IAAI6G,EAAmCxE,EAAKyE,YAAYN,MAAM,UAC1DK,GACFA,EAAgBV,SAAQ,SAACW,GAClBnI,EAAsBmI,KACzBnI,EAAsBmI,GAAe,CAAEL,eAAgB,KAEzD9H,EAAsBmI,GAAaL,eAAeC,KAAKrE,EAAKrC,UAMlE,IAAM+G,GAAsBC,YAC1BvD,EAAczE,OACdyB,EACAL,EACAxB,OAAOC,KAAKJ,GACZG,OAAOC,KAAKH,GACZE,OAAOC,KAAKF,GACZyD,EACAmB,EACAX,GAGIqE,GAAgBF,GAAoBG,QAAUhC,GAAkB6B,GAAoBG,QAAUjC,EAC9FkC,GAAe1G,EAAiByG,OAAS,GAAKzD,EAAczE,OAAOkI,OAAS,GAAKH,GAAoBG,OAAS,EAQ9GrH,GAAmB,SAACuG,EAAqB5G,GAC7C,IAAM4H,EAAqB1G,EAAkBlB,GAAUY,WACjDiH,EAAoB5G,EAAiBxB,SAASmH,GAEhDkB,EAAU,EAEVC,EAA6B,GAE7BF,GACFE,EAAmB9G,EAAiBmF,QAAO,SAAC4B,GAAD,OAAOA,IAAMpB,KACxD/C,EAAoBkE,KAEpBA,EAAmB,GAAH,mBAAO9G,GAAP,CAAyB2F,IACzC/C,EAAoBkE,IAGtBA,EAAiBzI,KAAI,SAACkB,GAAD,OAASoH,EAAmBnI,SAASe,GAAMsH,IAAYA,KAE5E,IAAMG,EAAsBH,IAAYF,EAAmBF,OAErDQ,EAAsBlH,EAAevB,SAASO,GAEhDiI,EAAsBC,GAAsBvE,EAAkB,GAAD,mBAAK3C,GAAL,CAAqBhB,KACjFkI,GAAsBvE,EAAkB3C,EAAeoF,QAAO,SAAC+B,GAAD,OAAOA,IAAMnI,OAO5EmB,GAAyB,SAACnB,GAC1BgB,EAAeF,MAAK,SAACN,GAAD,OAAQA,IAAOR,KAAW2D,EAAkB3C,EAAeoF,QAAO,SAAC+B,GAAD,OAAOA,IAAMnI,MAClG2D,EAAkB,GAAD,mBAAK3C,GAAL,CAAqBhB,KAE3C,IAAMoI,EAAqBlH,EAAkBlB,GAAUY,WAEjDyH,EAA+BD,EAAmBhC,QACtD,SAACkC,GAAD,OAAwBrH,EAAiBH,MAAK,SAACyH,GAAD,OAAQA,IAAOD,QAE3DD,EAA6BX,OAAS,EACxC7D,GAAoB,SAAC5C,GAAD,4BAA0BA,GAA1B,YAA+CoH,OAEnExE,GAAoB,SAAC5C,GAAD,OAClBA,EAAiBmF,QAAO,SAACmC,GAAD,OAASH,EAAmBtH,MAAK,SAACwH,GAAD,OAAuBC,IAAOD,YASvF/J,GAAqB,SAACiK,GAC1B,IACMC,EADWxE,EAAczE,OAAOsB,MAAK,SAAC4H,GAAD,OAAOA,IAAMF,EAAOnK,SAE3DsK,YAAgC1E,EAAczE,OAAQgJ,EAAOnK,OAC7DuK,YAA2B3E,EAAczE,OAAQgJ,EAAOnK,OAC5D6F,EAAiB,CAAE1E,OAAQiJ,KAOvBxF,GAAkB,SAAC4F,GACvB,IAAMvK,EAAWiJ,GAAoB9H,SAASoJ,GACxCC,EAAa/E,EAAsBtE,SAASoJ,GAC5CE,EAAqB3F,EAAqB3D,SAASoJ,GAErD5E,EAAczE,OAAOkI,OAAS,GAAKzG,EAAiByG,OAAS,EAC1DoB,GAAeC,IAAsBzK,EACjCwK,IAAeC,EACtB/E,EAAyBD,EAAsBqC,QAAO,SAAC4B,GAAD,OAAOA,IAAMa,MAClD/E,EAAVxF,EAA+B8E,EAAqBgD,QAAO,SAAC4B,GAAD,OAAOA,IAAMa,KACvD,GAAD,mBAAKzF,GAAL,CAA2ByF,KAJA7E,EAAyB,GAAD,mBAAKD,GAAL,CAA4B8E,KAMhF/E,EAApBiF,EAAyC3F,EAAqBgD,QAAO,SAAC4B,GAAD,OAAOA,IAAMa,KAE/D,GAAD,mBAAKzF,GAAL,CAA2ByF,MAY/C3F,GAAkB,SAAC8F,GAAD,OAA2B7E,OAAO8E,KAAKC,qBAAW,eAAeF,GAAkB,WAErGtH,GAAe,WACnBoC,EAAqB,IACrBE,EAAyB,IACzBE,EAAiB,CAAE1E,OAAQ,KAC3BqE,EAAoB,KAGhBxC,GAAgB,WACpB,IAAI8H,EAAiB,GAErB5B,GAAoBZ,SAAQ,SAACnG,GAC3B2I,EAASA,EAAOC,OAAU5I,EAAjB,QAEX2I,EAASA,EAAOE,QAAQ,MAAO,IAC/BC,mBAAS,qDAAqDH,IAG1D5I,GAAwB,SAACE,GAA4B,MACpDA,EAAID,IAAOC,EAAI8I,eAChB9F,EAAYhD,EAAID,KAEpBkD,EAAe,OAAD,UACTD,IADS,MAEXhD,EAAID,IAAK,CACRE,OAAQD,EAAI8I,cAHF,OAQhB,IAAKnJ,GAAoBqD,EAAY,GAAM,CACzC,IAAI+F,GAAU,EAEdpK,OAAOC,KAAKoE,GAAanE,KAAI,SAACmK,GACxBhG,EAAYgG,GAAO/I,OAAS8I,KAASA,GAAU/F,EAAYgG,GAAO/I,WAExEkD,EAAoB4F,IAGtB,OACE,kBAAC,IAAD,CAAQE,SAAO,YAAYC,WAAW,8BACpC,kBAAC,IAAD,CAAKtL,MAAM,kBACX,kBAAC,IAAD,CAAmBuL,WAAW,IAC9B,yBAAKnL,UAAU,0BAAf,8VAMA,yBAAKA,UAAU,2BACb,yBAAKA,UAAU,sBACb,kBAACsC,EAAD,CACEd,cAAeW,EACfI,eAAgBA,EAChBZ,iBAAkBA,EAClBa,iBAAkBA,EAClBZ,iBAAkBA,GAClBa,kBAAmBA,EACnBX,sBAAuBA,GACvBY,uBAAwBA,KAE1B,kBAACwB,EAAD,CACEC,aAAcA,EACdK,gBAAiBA,GACjBC,gBAAiBA,GACjBJ,iBAAkBA,EAClBO,eAAgBkE,GAChBnE,qBAAsBA,EACtBD,sBAAuBY,KAG3B,kBAAChF,EAAD,CACEC,kBAAmBiF,EACnB/E,kBAAmBA,EACnBX,mBAAoBA,GACpBU,qBAAsBA,EACtBE,sBAAuBA,KAG3B,yBAAKV,UAAU,qBACb,kBAAC2C,EAAD,CAAcC,cAAeA,GAAeC,kBAAmBmG,GAAelG,WAAW,WACzF,kBAAC,EAAD,CAAaG,aAAcA,GAAcC,iBAAkBgG,GAAcpG,WAAW,c","file":"component---src-pages-technology-selector-tsx-da77431582830dd9e8ec.js","sourcesContent":["import React from 'react'\r\n\r\ninterface Props {\r\n  index: number\r\n  title: string\r\n  groupTitle: string\r\n  isActive: boolean\r\n  onClickSideBarItem(sideBarItemsTitle: { title: string }, isActive: boolean): void\r\n}\r\n\r\nexport const SidebarButton = (props: Props) => {\r\n  const { groupTitle, index, title, isActive, onClickSideBarItem } = props\r\n\r\n  return (\r\n    <button\r\n      key={`${title}${index}`}\r\n      className=\"sidebar-button\"\r\n      onClick={() => onClickSideBarItem({ title: title }, isActive)}\r\n      style={\r\n        isActive\r\n          ? { border: '0.5px solid black', color: 'white', backgroundColor: '#ce2256' }\r\n          : { border: '0.5px solid black', backgroundColor: 'white', color: 'black' }\r\n      }\r\n    >\r\n      {title}\r\n    </button>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { SidebarButton } from './SideBarButton'\r\nimport { SideBarItemDictionary } from '../../../types/Global'\r\n\r\ninterface Props {\r\n  sideBarItemTitles: { titles: string[] }\r\n  disruptiveDictionary: SideBarItemDictionary\r\n  sensoryDictionary: SideBarItemDictionary\r\n  environmentDictionary: SideBarItemDictionary\r\n  onClickSideBarItem(sideBarTitle: { title: string }, isActive: boolean): void\r\n}\r\n\r\nexport default function Sidebar(props: Props) {\r\n  const { sideBarItemTitles, disruptiveDictionary, sensoryDictionary, environmentDictionary, onClickSideBarItem } = props\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"sidebar-container\">\r\n        <div className=\"sidebar-section\">\r\n          <div className=\"sidebar-header\">Disruptiveness</div>\r\n          {Object.keys(disruptiveDictionary).map((title, i) => {\r\n            const isActive = sideBarItemTitles.titles.includes(title)\r\n            return (\r\n              <SidebarButton\r\n                index={i}\r\n                key={`${title}${i}`}\r\n                isActive={isActive}\r\n                title={title}\r\n                groupTitle={'disruptiveness'}\r\n                onClickSideBarItem={onClickSideBarItem}\r\n              />\r\n            )\r\n          })}\r\n        </div>\r\n        <div className=\"sidebar-section\">\r\n          <div className=\"sidebar-header\">Sensory</div>\r\n          {Object.keys(sensoryDictionary).map((title, i) => {\r\n            const isActive = sideBarItemTitles.titles.includes(title)\r\n            return (\r\n              <SidebarButton\r\n                index={i}\r\n                key={`${title}${i}`}\r\n                isActive={isActive}\r\n                title={title}\r\n                groupTitle={'sensory'}\r\n                onClickSideBarItem={onClickSideBarItem}\r\n              />\r\n            )\r\n          })}\r\n        </div>\r\n        <div className=\"sidebar-section\">\r\n          <div className=\"sidebar-header\">Environment</div>\r\n          {Object.keys(environmentDictionary).map((title, i) => {\r\n            const isActive = sideBarItemTitles.titles.includes(title)\r\n            return (\r\n              <SidebarButton\r\n                index={i}\r\n                key={`${title}${i}`}\r\n                isActive={isActive}\r\n                title={title}\r\n                groupTitle={'environment'}\r\n                onClickSideBarItem={onClickSideBarItem}\r\n              />\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\ninterface FamilyChallengeViewProps {\r\n  name: string\r\n  active?: boolean\r\n  onPress: () => void\r\n}\r\n\r\nexport function FamilyChallengeView(props: FamilyChallengeViewProps) {\r\n  const { name, active, onPress } = props\r\n\r\n  const className = active ? 'family-card-button active' : 'family-card-button'\r\n  return (\r\n    <p className={className} onClick={onPress}>\r\n      {name}\r\n    </p>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { FamilyChallengeView } from './FamilyChallengeView'\r\nimport { ChallengeFamily, ChallengeDictionary } from '../../../types/Global'\r\nexport interface FamilyCardViewProps {\r\n  familyId: string\r\n  isFamilyActive: boolean\r\n  family: ChallengeFamily\r\n  cardHeaderHeight: number\r\n  activeChallengeIds: string[]\r\n  allChallenges: ChallengeDictionary\r\n  onFamilyPress?: (familyId: string) => void\r\n  onSetCardHeaderHeight: (height: HTMLHeadingElement) => void\r\n  onChallengePress: (challengeId: string, familyId: string) => void\r\n}\r\n\r\nexport function FamilyCardView(props: FamilyCardViewProps) {\r\n  const {\r\n    family,\r\n    familyId,\r\n    allChallenges,\r\n    onFamilyPress,\r\n    isFamilyActive,\r\n    cardHeaderHeight,\r\n    onChallengePress,\r\n    activeChallengeIds,\r\n    onSetCardHeaderHeight,\r\n  } = props\r\n\r\n  const cardView = (\r\n    <div className={isFamilyActive ? 'family-card active' : 'family-card'}>\r\n      <h4\r\n        id={familyId}\r\n        className={isFamilyActive ? 'active' : ''}\r\n        ref={(ref) => (ref ? onSetCardHeaderHeight(ref) : null)}\r\n        onClick={() => onFamilyPress?.(familyId)}\r\n        style={{ height: cardHeaderHeight || 'fit-content' }}\r\n      >\r\n        {family.familyName}\r\n      </h4>\r\n      {family.challenges.map((challenge) => {\r\n        const active = activeChallengeIds.some((id) => id === challenge)\r\n        return (\r\n          <FamilyChallengeView\r\n            key={challenge}\r\n            active={active}\r\n            name={allChallenges[challenge].challenge}\r\n            onPress={() => onChallengePress(challenge, familyId)}\r\n          />\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n\r\n  return cardView\r\n}\r\n","import React from 'react'\r\nimport { ChallengeDictionary, ChallengeFamilyDictionary } from '../../../types/Global'\r\nimport { FamilyCardView } from './FamilyCardView'\r\n\r\ninterface FamilyCardsProps {\r\n  activeFamilies: string[]\r\n  cardHeaderHeight: number\r\n  activeChallenges: string[]\r\n  allChallenges: ChallengeDictionary\r\n  challengeFamilies: ChallengeFamilyDictionary\r\n  onChallengeFamilyPress: (familyId: string) => void\r\n  onSetCardHeaderHeight: (height: HTMLHeadingElement) => void\r\n  onChallengePress: (challengeId: string, familyId: string) => void\r\n}\r\n\r\nexport default function FamilyCards(props: FamilyCardsProps) {\r\n  const {\r\n    allChallenges,\r\n    activeFamilies,\r\n    cardHeaderHeight,\r\n    onChallengePress,\r\n    activeChallenges,\r\n    challengeFamilies,\r\n    onSetCardHeaderHeight,\r\n    onChallengeFamilyPress,\r\n  } = props\r\n\r\n  return (\r\n    <div className=\"family-card-grid-wrapper\">\r\n      {Object.keys(challengeFamilies).map((id) => (\r\n        <FamilyCardView\r\n          key={id}\r\n          familyId={id}\r\n          allChallenges={allChallenges}\r\n          family={challengeFamilies[id]}\r\n          onChallengePress={onChallengePress}\r\n          cardHeaderHeight={cardHeaderHeight}\r\n          activeChallengeIds={activeChallenges}\r\n          onFamilyPress={onChallengeFamilyPress}\r\n          onSetCardHeaderHeight={onSetCardHeaderHeight}\r\n          isFamilyActive={activeFamilies.includes(id) ? true : false}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\ninterface Props {\r\n  onClickSubmit(): void\r\n  isSubmitDisabled: boolean\r\n  buttonText: string\r\n}\r\n\r\nexport default function SubmitButton(props: Props) {\r\n  const { onClickSubmit, isSubmitDisabled, buttonText } = props\r\n\r\n  return (\r\n    <button\r\n      disabled={isSubmitDisabled}\r\n      className=\"submit-button-tech-page\"\r\n      onClick={() => onClickSubmit()}\r\n      style={{ opacity: isSubmitDisabled ? 0.3 : 1 }}\r\n    >\r\n      {buttonText}\r\n    </button>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\ninterface Props {\r\n  onClickReset(): void\r\n  isResetDisabled: boolean\r\n  buttonText: string\r\n}\r\n\r\nexport default function SubmitButton(props: Props) {\r\n  const { onClickReset, isResetDisabled, buttonText } = props\r\n\r\n  return (\r\n    <button\r\n      disabled={isResetDisabled}\r\n      className=\"reset-button-tech-page\"\r\n      onClick={() => onClickReset()}\r\n      style={{ opacity: isResetDisabled ? 0.3 : 1 }}\r\n    >\r\n      {buttonText}\r\n    </button>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Technology } from '../../../types/Global'\r\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\r\nimport { FileNode } from 'gatsby-plugin-image/dist/src/components/hooks'\r\n\r\ninterface Props {\r\n  technology: Technology\r\n  technologyImage: FileNode\r\n  isTechDisabled: boolean\r\n  isExplicitlyDisabled?: boolean\r\n  isExplicitlyEnabled: boolean\r\n  onPress: (techId: string) => void\r\n  onPressLink: (techId: string) => void\r\n}\r\n\r\nexport const TechnologyCard = (props: Props) => {\r\n  const { technology, isTechDisabled, isExplicitlyEnabled, isExplicitlyDisabled, onPress, onPressLink } = props\r\n\r\n  const showHideIcon = `tech-container-icon${isTechDisabled ? ' disabled' : ''}${\r\n    isExplicitlyDisabled ? ' explicit' : ''\r\n  }${isExplicitlyEnabled ? ' explicit-enabled' : ''}`\r\n\r\n  let imageData = getImage(props.technologyImage)!\r\n\r\n  return (\r\n    <div className=\"tech-container\" key={technology.id}>\r\n      <div onClick={() => onPress(technology.id)} data-tip={technology.title || ''} data-iscapture=\"true\">\r\n        <GatsbyImage className={showHideIcon} image={imageData} alt={technology.title} />\r\n      </div>\r\n      <button className=\"tech-click-button\" onClick={() => onPressLink(technology.slug)}>\r\n        {technology.title}\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { TechnologyCard } from './TechnologyCard'\r\nimport { Technology } from '../../../types/Global'\r\nimport { FileNode } from 'gatsby-plugin-image/dist/src/components/hooks'\r\n\r\ninterface Props {\r\n  enabledTechIds: string[]\r\n  technologies: Technology[]\r\n  technologyImages: FileNode[]\r\n  onClickTechItem: (techId: string) => void\r\n  explicitlyDisabledIds: string[]\r\n  explicitlyEnabledIds: string[]\r\n  onClickTechLink: (techId: string) => void\r\n}\r\n\r\nexport default function TechnologyCards(props: Props) {\r\n  return (\r\n    <div className=\"tech-grid-wrapper\">\r\n      {props.technologies.map((tech) => {\r\n        const technologyImage = props.technologyImages.find((image: any) => image.name === tech.icon)\r\n        if (!technologyImage) {\r\n          return null;\r\n        }\r\n        return (\r\n          <TechnologyCard\r\n            key={tech.id}\r\n            onPress={props.onClickTechItem}\r\n            onPressLink={props.onClickTechLink}\r\n            technology={tech}\r\n            technologyImage={technologyImage}\r\n            isExplicitlyDisabled={props.explicitlyDisabledIds.includes(tech.id)}\r\n            isExplicitlyEnabled={props.explicitlyEnabledIds.includes(tech.id)}\r\n            isTechDisabled={!props.enabledTechIds.some((id) => id === tech.id)}\r\n          />\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport {\r\n  Challenge,\r\n  ChallengeDictionary,\r\n  ChallengeFamilyDictionary,\r\n  ChallengeFamilyQueryData,\r\n  ChallengeTechnologyLinkage,\r\n  ChallengeQueryData,\r\n  SideBarItemDictionary,\r\n  Technology,\r\n  TechnologyQueryData,\r\n} from '../../types/Global'\r\nimport {\r\n  addTechToChallenge,\r\n  getChallengeFamiliesDictionary,\r\n  getChallengesDictionary,\r\n  mapEdgesToNodes,\r\n} from '../lib/helpers'\r\nimport _ from 'lodash'\r\nimport { graphql, navigate, withPrefix } from 'gatsby'\r\nimport SEO from '../components/core/seo'\r\nimport Layout from '../components/core/layout'\r\nimport Sidebar from '../components/technology-selector/Sidebar'\r\nimport FamilyCards from '../components/technology-selector/FamilyCards'\r\nimport SubmitButton from '../components/technology-selector/SubmitButton'\r\nimport ResetButton from '../components/technology-selector/ResetButton'\r\nimport TechnologyCards from '../components/technology-selector/TechnologyCards'\r\nimport '../styles/tech-selector-page.scss'\r\nimport {\r\n  addSideBarItemTitleToArray,\r\n  filterTechnologies,\r\n  removeSideBarItemTitleFromArray,\r\n} from '../components/technology-selector/filter-tech'\r\nimport { FileNode } from 'gatsby-plugin-image/dist/src/components/hooks'\r\nimport { FixedHeaderOffset } from '../components/core/fixed-header-offset'\r\n\r\ninterface Props {\r\n  data: {\r\n    allTechnologiesCsv: TechnologyQueryData[]\r\n    allCognitiveChallengeFamiliesCsv: ChallengeFamilyQueryData[]\r\n    allCognitiveChallengesCsv: ChallengeQueryData[]\r\n    technologyImages: FileNode[]\r\n    allChallengeTechnologyLinkagesCsv: ChallengeTechnologyLinkage[]\r\n  }\r\n}\r\ninterface CardHeaders {\r\n  [refId: string]: { height: number }\r\n}\r\nexport default function TechSelectorPage(props: Props) {\r\n  const { data } = props\r\n\r\n  // Page State\r\n  const [cardHeaders, setCardHeaders] = useState<CardHeaders>({})\r\n  const [activeFamilies, setActiveFamilies] = useState<string[]>([])\r\n  const [cardHeaderHeight, setCardHeaderHeight] = useState<number>(0)\r\n  const [activeChallenges, setActiveChallenges] = useState<string[]>([])\r\n  const [explicitlyEnabledIds, setExplicitlyEnabled] = useState<string[]>([])\r\n  const [disabledTechnologyIds, setDisabledTechnologyIds] = useState<string[]>([])\r\n  const [sideBarTitles, setSideBarTitles] = useState<{ titles: string[] }>({ titles: [] })\r\n\r\n  const height = typeof window != 'undefined' ? window.innerHeight : 1920\r\n  const width = typeof window != 'undefined' ? window.innerWidth : 1080\r\n\r\n  const [dimensions, setDimensions] = React.useState({\r\n    height: height,\r\n    width: width,\r\n  })\r\n\r\n  const handleResize = (fn: Function, ms: number) => {\r\n    let timer: any\r\n    return () => {\r\n      clearTimeout(timer)\r\n      timer = setTimeout((x) => {\r\n        timer = null\r\n        fn.apply(x, arguments)\r\n        window.location.reload()\r\n      }, ms)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const resizeListener = handleResize(() => {\r\n      setDimensions({\r\n        height: window.innerHeight,\r\n        width: window.innerWidth,\r\n      })\r\n    }, 200)\r\n    window.addEventListener('resize', resizeListener)\r\n    return () => {\r\n      window.removeEventListener('resize', resizeListener)\r\n    }\r\n  }, [dimensions])\r\n\r\n  // This is the max and min number of tech to compare\r\n  const techCompareMax = 5\r\n  const techCompareMin = 2\r\n\r\n  // Get data from CSV files\r\n  const technologies: Technology[] = mapEdgesToNodes(data.allTechnologiesCsv)\r\n  const challengeFamilies: ChallengeFamilyDictionary = getChallengeFamiliesDictionary(\r\n    data.allCognitiveChallengeFamiliesCsv,\r\n    data.allCognitiveChallengesCsv\r\n  )\r\n  const challenges: ChallengeDictionary = getChallengesDictionary(data.allCognitiveChallengesCsv)\r\n\r\n  // Get tech images\r\n  const technologyImages = mapEdgesToNodes(props.data.technologyImages)\r\n\r\n  // Create 3 sub-sections for the sidebar\r\n  const disruptiveDictionary: SideBarItemDictionary = {}\r\n  const sensoryDictionary: SideBarItemDictionary = {}\r\n  const environmentDictionary: SideBarItemDictionary = {}\r\n\r\n  const challengeToTechnologyLinkages: ChallengeTechnologyLinkage[] = mapEdgesToNodes(\r\n    props.data.allChallengeTechnologyLinkagesCsv\r\n  )\r\n\r\n  technologies.map((tech) => {\r\n    let techChallenges = challengeToTechnologyLinkages\r\n      .filter(\r\n        // Get all rows that match this Technology and have a Linkage flag of 1\r\n        (linkage: ChallengeTechnologyLinkage) => linkage.Technology_Name === tech.title && linkage.Linked_0_1 === '1'\r\n      )\r\n      .map(\r\n        // Convert that row to a single Challenge ID by...\r\n        (linkage: ChallengeTechnologyLinkage) => {\r\n          // ...finding the Challenge object whose name matches the Short Name in the row\r\n          let challengeObject = Object.values(challenges).find(\r\n            (challengeObject: Challenge) =>\r\n              challengeObject.challenge === linkage.Individual_Cognitive_Challenge_Short_Name\r\n          )\r\n          // And returning its ID\r\n          return challengeObject?.id\r\n        }\r\n      )\r\n\r\n    if (techChallenges) {\r\n      techChallenges.forEach((challengeId?: string) => {\r\n        if (challengeId) {\r\n          addTechToChallenge(challenges, challengeId, tech.id)\r\n        }\r\n      })\r\n    }\r\n\r\n    let techDisruptiveness: string[] | null = tech.disruptiveness.match(/[^:]+/g)\r\n    if (techDisruptiveness) {\r\n      techDisruptiveness.forEach((disruptiveness: string) => {\r\n        if (!disruptiveDictionary[disruptiveness]) {\r\n          disruptiveDictionary[disruptiveness] = { associatedTech: [] }\r\n        }\r\n        disruptiveDictionary[disruptiveness].associatedTech.push(tech.id)\r\n      })\r\n    }\r\n\r\n    let techSensory: string[] | null = tech.sensory.match(/[^:]+/g)\r\n    if (techSensory) {\r\n      techSensory.forEach((sensory: string) => {\r\n        if (!sensoryDictionary[sensory]) {\r\n          sensoryDictionary[sensory] = { associatedTech: [] }\r\n        }\r\n        sensoryDictionary[sensory].associatedTech.push(tech.id)\r\n      })\r\n    }\r\n\r\n    let techEnvironment: string[] | null = tech.environment.match(/[^:]+/g)\r\n    if (techEnvironment) {\r\n      techEnvironment.forEach((environment: string) => {\r\n        if (!environmentDictionary[environment]) {\r\n          environmentDictionary[environment] = { associatedTech: [] }\r\n        }\r\n        environmentDictionary[environment].associatedTech.push(tech.id)\r\n      })\r\n    }\r\n  })\r\n\r\n  // Calculate the current available techs\r\n  const enabledTechnologies = filterTechnologies(\r\n    sideBarTitles.titles,\r\n    activeChallenges,\r\n    challenges,\r\n    Object.keys(disruptiveDictionary),\r\n    Object.keys(sensoryDictionary),\r\n    Object.keys(environmentDictionary),\r\n    technologies,\r\n    disabledTechnologyIds,\r\n    explicitlyEnabledIds\r\n  )\r\n\r\n  const submitEnabled = enabledTechnologies.length >= techCompareMin && enabledTechnologies.length <= techCompareMax\r\n  const resetEnabled = activeChallenges.length > 0 || sideBarTitles.titles.length > 0 || enabledTechnologies.length > 0\r\n\r\n  // Event handlers\r\n\r\n  /**\r\n   * When a specific challenge from within a family is pressed; add or remove where appropriate\r\n   * @param challengeId\r\n   */\r\n  const onChallengePress = (challengeId: string, familyId: string) => {\r\n    const challengesInFamily = challengeFamilies[familyId].challenges\r\n    const isChallengeActive = activeChallenges.includes(challengeId)\r\n\r\n    let counter = 0\r\n\r\n    let editedChallenges: string[] = []\r\n\r\n    if (isChallengeActive) {\r\n      editedChallenges = activeChallenges.filter((c) => c !== challengeId)\r\n      setActiveChallenges(editedChallenges)\r\n    } else {\r\n      editedChallenges = [...activeChallenges, challengeId]\r\n      setActiveChallenges(editedChallenges)\r\n    }\r\n\r\n    editedChallenges.map((id) => (challengesInFamily.includes(id) ? counter++ : counter))\r\n\r\n    const wholeFamilySelected = counter === challengesInFamily.length\r\n\r\n    const familyAlreadyActive = activeFamilies.includes(familyId)\r\n\r\n    if (wholeFamilySelected) !familyAlreadyActive ? setActiveFamilies([...activeFamilies, familyId]) : activeFamilies\r\n    else familyAlreadyActive ? setActiveFamilies(activeFamilies.filter((e) => e !== familyId)) : activeFamilies\r\n  }\r\n\r\n  /**\r\n   * When a whole family of challenges is pressed; add any remaining inactive challenges, or remove all if all are active.\r\n   * @param familyId\r\n   */\r\n  const onChallengeFamilyPress = (familyId: string) => {\r\n    if (activeFamilies.some((id) => id === familyId)) setActiveFamilies(activeFamilies.filter((e) => e !== familyId))\r\n    else setActiveFamilies([...activeFamilies, familyId])\r\n\r\n    const familyChallengeIds = challengeFamilies[familyId].challenges\r\n\r\n    const inactiveChallengesFromFamily = familyChallengeIds.filter(\r\n      (familyChallengeId) => !activeChallenges.some((ac) => ac === familyChallengeId)\r\n    )\r\n    if (inactiveChallengesFromFamily.length > 0) {\r\n      setActiveChallenges((activeChallenges) => [...activeChallenges, ...inactiveChallengesFromFamily])\r\n    } else {\r\n      setActiveChallenges((activeChallenges) =>\r\n        activeChallenges.filter((ac) => !familyChallengeIds.some((familyChallengeId) => ac === familyChallengeId))\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When a specific item from within a side-bar category is pressed; add or remove where appropriate\r\n   * @param button\r\n   */\r\n  const onClickSideBarItem = (button: { title: string }): void => {\r\n    const isActive = sideBarTitles.titles.some((t) => t === button.title)\r\n    const editedTitles = isActive\r\n      ? removeSideBarItemTitleFromArray(sideBarTitles.titles, button.title)\r\n      : addSideBarItemTitleToArray(sideBarTitles.titles, button.title)\r\n    setSideBarTitles({ titles: editedTitles })\r\n  }\r\n\r\n  /**\r\n   * When a specific technology is selected - remove it from view\r\n   * @param techId\r\n   */\r\n  const onClickTechItem = (techId: string): void => {\r\n    const isActive = enabledTechnologies.includes(techId)\r\n    const isDisabled = disabledTechnologyIds.includes(techId)\r\n    const isExplicityEnabled = explicitlyEnabledIds.includes(techId)\r\n\r\n    if (sideBarTitles.titles.length > 0 || activeChallenges.length > 0) {\r\n      if (!isDisabled && !isExplicityEnabled && isActive) setDisabledTechnologyIds([...disabledTechnologyIds, techId])\r\n      else if (isDisabled && !isExplicityEnabled)\r\n        setDisabledTechnologyIds(disabledTechnologyIds.filter((c) => c !== techId))\r\n      else if (isActive) setExplicitlyEnabled(explicitlyEnabledIds.filter((c) => c !== techId))\r\n      else setExplicitlyEnabled([...explicitlyEnabledIds, techId])\r\n    } else {\r\n      if (isExplicityEnabled) setExplicitlyEnabled(explicitlyEnabledIds.filter((c) => c !== techId))\r\n      else {\r\n        setExplicitlyEnabled([...explicitlyEnabledIds, techId])\r\n      }\r\n      // setDisabledTechnologyIds((disabledTechnologyIds) =>\r\n      //   isDisabled ? disabledTechnologyIds.filter((c) => c !== techId) : [...disabledTechnologyIds, techId]\r\n      // )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send user to the tech details page when they click on \"To Library Page\"\r\n   * @param navToTechPage Tech name to link to page\r\n   */\r\n  const onClickTechLink = (navToTechPage: string) => window.open(withPrefix(`/technology/${navToTechPage}`), '_blank')\r\n\r\n  const onClickReset = () => {\r\n    setExplicitlyEnabled([])\r\n    setDisabledTechnologyIds([])\r\n    setSideBarTitles({ titles: [] })\r\n    setActiveChallenges([])\r\n  }\r\n\r\n  const onClickSubmit = () => {\r\n    let params: string = ''\r\n\r\n    enabledTechnologies.forEach((id) => {\r\n      params = params.concat(`${id},`)\r\n    })\r\n    params = params.replace(/\\,$/, '')\r\n    navigate(`/technology-comparison-visualisation?technologies=${params}`)\r\n  }\r\n\r\n  const onSetCardHeaderHeight = (ref: HTMLHeadingElement) => {\r\n    if (!ref.id || !ref.clientHeight) return\r\n    if (cardHeaders[ref.id]) return\r\n\r\n    setCardHeaders({\r\n      ...cardHeaders,\r\n      [ref.id]: {\r\n        height: ref.clientHeight,\r\n      },\r\n    })\r\n  }\r\n\r\n  if (!cardHeaderHeight && cardHeaders['1']) {\r\n    let highest = 0\r\n\r\n    Object.keys(cardHeaders).map((refId) => {\r\n      if (cardHeaders[refId].height > highest) highest = cardHeaders[refId].height\r\n    })\r\n    setCardHeaderHeight(highest)\r\n  }\r\n\r\n  return (\r\n    <Layout title-=\"Aleph HMI\" pageHeader=\"Technology Events Timeline\">\r\n      <SEO title=\"Tech Selector\" />\r\n      <FixedHeaderOffset hasNavbar={true} />\r\n      <div className=\"tech-selector-guidance\">\r\n        Use the filters below to select technologies that are relevant to different defence-specific challenges, or that\r\n        are associated with different levels of disruptiveness, sensory modalities or operational environments. Once you\r\n        have five or fewer technologies selected, submit to generate a series of comparative technology timeline\r\n        visualisations.\r\n      </div>\r\n      <div className=\"tech-selector-container\">\r\n        <div className=\"tech-selector-main\">\r\n          <FamilyCards\r\n            allChallenges={challenges}\r\n            activeFamilies={activeFamilies}\r\n            cardHeaderHeight={cardHeaderHeight}\r\n            activeChallenges={activeChallenges}\r\n            onChallengePress={onChallengePress}\r\n            challengeFamilies={challengeFamilies}\r\n            onSetCardHeaderHeight={onSetCardHeaderHeight}\r\n            onChallengeFamilyPress={onChallengeFamilyPress}\r\n          />\r\n          <TechnologyCards\r\n            technologies={technologies}\r\n            onClickTechItem={onClickTechItem}\r\n            onClickTechLink={onClickTechLink}\r\n            technologyImages={technologyImages}\r\n            enabledTechIds={enabledTechnologies}\r\n            explicitlyEnabledIds={explicitlyEnabledIds}\r\n            explicitlyDisabledIds={disabledTechnologyIds}\r\n          />\r\n        </div>\r\n        <Sidebar\r\n          sideBarItemTitles={sideBarTitles}\r\n          sensoryDictionary={sensoryDictionary}\r\n          onClickSideBarItem={onClickSideBarItem}\r\n          disruptiveDictionary={disruptiveDictionary}\r\n          environmentDictionary={environmentDictionary}\r\n        />\r\n      </div>\r\n      <div className=\"tech-page-buttons\">\r\n        <SubmitButton onClickSubmit={onClickSubmit} isSubmitDisabled={!submitEnabled} buttonText=\"Submit\" />\r\n        <ResetButton onClickReset={onClickReset} isResetDisabled={!resetEnabled} buttonText=\"Reset\" />\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const TechnologyQuery = graphql`\r\n  {\r\n    allTechnologiesCsv {\r\n      edges {\r\n        node {\r\n          id\r\n          title\r\n          slug\r\n          disruptiveness\r\n          sensory\r\n          environment\r\n          icon\r\n        }\r\n      }\r\n    }\r\n    technologyImages: allFile(filter: { relativePath: { regex: \"image/black/png/\" } }) {\r\n      edges {\r\n        node {\r\n          name\r\n          childImageSharp {\r\n            gatsbyImageData(layout: CONSTRAINED, placeholder: TRACED_SVG)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    allCognitiveChallengeFamiliesCsv {\r\n      edges {\r\n        node {\r\n          family\r\n          familyName\r\n        }\r\n      }\r\n    }\r\n    allCognitiveChallengesCsv {\r\n      edges {\r\n        node {\r\n          id\r\n          family\r\n          challenge\r\n        }\r\n      }\r\n    }\r\n    allChallengeTechnologyLinkagesCsv {\r\n      edges {\r\n        node {\r\n          Individual_Cognitive_Challenge_Short_Name\r\n          Technology_Name\r\n          Linked_0_1\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}