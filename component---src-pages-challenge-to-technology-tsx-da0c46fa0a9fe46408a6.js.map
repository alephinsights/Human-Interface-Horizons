{"version":3,"sources":["webpack:///./src/lib/helpers.ts","webpack:///./src/pages/challenge-to-technology.tsx"],"names":["mapEdgesToNodes","data","edges","map","edge","node","getChallengesDictionary","challenges","challenge","i","length","id","getChallengeFamiliesDictionary","familyData","challengeData","challengeFamilies","familyNodes","challengeNodes","familyNode","familyChallenges","filter","family","familyName","addTechToChallenge","challengeId","techId","associatedTech","includes","push","createTabContent","tech","summary","title","text","timetoeffect_optimistic","timetoeffect_likely","timetoeffect_pessimistic","exampleApplications","example_applications","references","tabs","content","overview","implicationsDefenceSecurity","softwareAndAiRequirements","legalEthicalImplications","strategicImpactAssessment","typeOfTechnology","prominentDevelopers","ChallengeToTech","props","allCognitiveChallengeFamiliesCsv","allCognitiveChallengesCsv","pageHeader","className","to","Object","keys","famId","key","onClick","familyId","navigate","chalId"],"mappings":"65BAYO,SAASA,EAAgBC,GAC9B,OAAKA,EAAKC,MACHD,EAAKC,MAAMC,KAAI,SAACC,GAAD,OAAeA,EAAKC,QADlBJ,GAAc,GAIjC,SAASK,EAAwBL,GACtC,IAAIM,EAAkC,GACtC,IAAKN,EAAKC,MAAO,OAAOD,GAAc,GAGtC,GAAIA,EAAKC,MAAM,GAAGG,KAAKG,UAAW,CAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAKC,MAAMQ,OAAQD,IACrCF,EAAWN,EAAKC,MAAMO,GAAGJ,KAAKM,IAAMV,EAAKC,MAAMO,GAAGJ,KAEpD,OAAOE,GAIJ,SAASK,EAA+BC,EAAiBC,GAC9D,IAAIC,EAA+C,GAEnD,GAAIF,EAAWX,OAASY,EAAcZ,MAKpC,IAJA,IAIA,EAJIc,EAAchB,EAAgBa,GAC9BI,EAAiBjB,EAAgBc,GAGrC,IAAuBE,KAAvB,aAAoC,KAA3BE,EAA2B,QAC9BC,EAAmBF,EACpBG,QAAO,SAACZ,GAAD,OAA0BA,EAAUa,SAAWH,EAAWG,UACjElB,KAAI,SAACK,GACJ,OAAOA,EAAUG,MAGrBI,EAAkBG,EAAWG,QAAU,CACrCA,OAAQH,EAAWG,OACnBC,WAAYJ,EAAWI,WACvBf,WAAYY,GAAoB,IAKtC,OAAOJ,EAoBF,SAASQ,EAAmBhB,EAAiCiB,EAAqBC,GAElFlB,EAAWiB,GAAaE,iBAC3BnB,EAAWiB,GAAaE,eAAiB,IAItCnB,EAAWiB,GAAaE,eAAgBC,SAASF,IACpDlB,EAAWiB,GAAaE,eAAgBE,KAAKH,G,0KAU1C,IAQMI,EAAmB,SAACC,GAAD,MAAuB,CACrDC,QAAS,CACPC,MAAO,UACPC,KAAMH,EAAKC,QACXG,wBAAyBJ,EAAKI,wBAC9BC,oBAAqBL,EAAKK,oBAC1BC,yBAA0BN,EAAKM,yBAC/BC,oBAAqBP,EAAKQ,qBAC1BC,WAAYT,EAAKS,YAEnBC,KAAM,CACJ,CACE7B,GAAI,WACJqB,MAAO,WACPS,QAASX,EAAKY,UAEhB,CACE/B,GAAI,8BACJqB,MAAO,sCACPS,QAASX,EAAKa,6BAEhB,CACEhC,GAAI,4BACJqB,MAAO,6BACPS,QAASX,EAAKc,2BAEhB,CACEjC,GAAI,2BACJqB,MAAO,6BACPS,QAASX,EAAKe,0BAEhB,CACElC,GAAI,4BACJqB,MAAO,mCACPS,QAASX,EAAKgB,2BAEhB,CACEnC,GAAI,mBACJqB,MAAO,qBACPS,QAASX,EAAKiB,kBAEhB,CACEpC,GAAI,sBACJqB,MAAO,uBACPS,QAASX,EAAKkB,yB,yDC/IpB,kIAoBe,SAASC,EAAgBC,GAAc,IAC5CjD,EAASiD,EAATjD,KAEFc,EAA+CH,YACnDX,EAAKkD,iCACLlD,EAAKmD,2BAGD7C,EAAkCD,YAAwBL,EAAKmD,2BAMrE,OACE,kBAAC,IAAD,CAAQC,WAAW,0CACjB,kBAAC,IAAD,CAAKrB,MAAM,4BACX,yBAAKsB,UAAU,gBACb,yBAAKA,UAAU,qBAAf,qcAKoB,kBAAC,OAAD,CAAMC,GAAG,gCAAT,SAEpB,yBAAKD,UAAU,oBACZE,OAAOC,KAAK1C,GAAmBZ,KAAI,SAACuD,GAAD,OAClC,yBAAKC,IAAKD,EAAOJ,UAAU,uBAAuBM,QAAS,kBAjBrCC,EAiBkEH,OAhBhGI,mBAAS,uDAAuDD,GADnC,IAACA,IAkBpB,yBAAKP,UAAU,6BAA6BvC,EAAkB2C,GAAOpC,YACrE,yBAAKgC,UAAU,0BACZvC,EAAkB2C,GAAOnD,WAAWJ,KAAI,SAAC4D,GAAD,OACvC,yBAAKJ,IAAKI,EAAQT,UAAU,qBACzB/C,EAAWwD,GAAQvD","file":"component---src-pages-challenge-to-technology-tsx-da0c46fa0a9fe46408a6.js","sourcesContent":["import {\r\n  TechnologyDictionary,\r\n  Challenge,\r\n  ChallengeDictionary,\r\n  ChallengeFamilyDictionary,\r\n  Technology,\r\n} from '../../types/Global'\r\n\r\nexport function cn(...args: any) {\r\n  return args.filter(Boolean).join(' ')\r\n}\r\n\r\nexport function mapEdgesToNodes(data: any) {\r\n  if (!data.edges) return data ? data : []\r\n  return data.edges.map((edge: any) => edge.node)\r\n}\r\n\r\nexport function getChallengesDictionary(data: any) {\r\n  let challenges: ChallengeDictionary = {}\r\n  if (!data.edges) return data ? data : {}\r\n\r\n  // challenges\r\n  if (data.edges[0].node.challenge) {\r\n    for (let i = 0; i < data.edges.length; i++) {\r\n      challenges[data.edges[i].node.id] = data.edges[i].node\r\n    }\r\n    return challenges\r\n  }\r\n}\r\n\r\nexport function getChallengeFamiliesDictionary(familyData: any, challengeData: any) {\r\n  let challengeFamilies: ChallengeFamilyDictionary = {}\r\n\r\n  if (familyData.edges && challengeData.edges) {\r\n    let familyNodes = mapEdgesToNodes(familyData)\r\n    let challengeNodes = mapEdgesToNodes(challengeData)\r\n\r\n    // challengeFamilies\r\n    for (var familyNode of familyNodes) {\r\n      let familyChallenges = challengeNodes\r\n        .filter((challenge: Challenge) => challenge.family === familyNode.family)\r\n        .map((challenge: Challenge) => {\r\n          return challenge.id\r\n        })\r\n\r\n      challengeFamilies[familyNode.family] = {\r\n        family: familyNode.family,\r\n        familyName: familyNode.familyName,\r\n        challenges: familyChallenges || [],\r\n      }\r\n    }\r\n  }\r\n\r\n  return challengeFamilies\r\n}\r\n\r\nexport function getTechnologyDictionary(data: any) {\r\n  let technologyDictionary: TechnologyDictionary = {}\r\n  if (!data.edges) return data ? data : []\r\n\r\n  if (data.edges[0].node.disruptiveness) {\r\n    for (let i = 0; i < data.edges.length; i++) {\r\n      technologyDictionary[data.edges[i].node.id] = data.edges[i].node\r\n    }\r\n    return technologyDictionary\r\n  }\r\n}\r\n\r\n/**\r\n * ### Adds the techID to the challenge's associatedTech[]\r\n * @param challengeId ID of the challenge\r\n * @param techId Tech instance ID\r\n */\r\nexport function addTechToChallenge(challenges: ChallengeDictionary, challengeId: string, techId: string): void {\r\n  // Creates empty associatedTech\r\n  if (!challenges[challengeId].associatedTech) {\r\n    challenges[challengeId].associatedTech = []\r\n  }\r\n\r\n  // Only adds if the id is not present\r\n  if (!challenges[challengeId].associatedTech!.includes(techId)) {\r\n    challenges[challengeId].associatedTech!.push(techId)\r\n  }\r\n\r\n  return\r\n}\r\n\r\n/**\r\n * ### Returns an array of techIds used to filter by Challenge\r\n * If challenge has no associated tech then [ ] is returned\r\n */\r\nexport const filterByChallenge = (challengeIds: string[], allTechIds: string[]): string[] => {\r\n  let enabledTechIds: string[] = []\r\n\r\n  allTechIds.map((id) => (challengeIds!.includes(id) ? enabledTechIds.push(id) : null))\r\n\r\n  return enabledTechIds\r\n}\r\n\r\nexport const createTabContent = (tech: Technology) => ({\r\n  summary: {\r\n    title: 'Summary',\r\n    text: tech.summary,\r\n    timetoeffect_optimistic: tech.timetoeffect_optimistic,\r\n    timetoeffect_likely: tech.timetoeffect_likely,\r\n    timetoeffect_pessimistic: tech.timetoeffect_pessimistic,\r\n    exampleApplications: tech.example_applications,\r\n    references: tech.references,\r\n  },\r\n  tabs: [\r\n    {\r\n      id: 'overview',\r\n      title: 'Overview',\r\n      content: tech.overview,\r\n    },\r\n    {\r\n      id: 'implicationsDefenceSecurity',\r\n      title: 'Implications for Defence & Security',\r\n      content: tech.implicationsDefenceSecurity,\r\n    },\r\n    {\r\n      id: 'softwareAndAiRequirements',\r\n      title: 'Software / AI Requirements',\r\n      content: tech.softwareAndAiRequirements,\r\n    },\r\n    {\r\n      id: 'legalEthicalImplications',\r\n      title: 'Legal/Ethical Implications',\r\n      content: tech.legalEthicalImplications,\r\n    },\r\n    {\r\n      id: 'strategicImpactAssessment',\r\n      title: 'Strategic DLOD Impact Assessment',\r\n      content: tech.strategicImpactAssessment,\r\n    },\r\n    {\r\n      id: 'typeOfTechnology',\r\n      title: 'Type of Technology',\r\n      content: tech.typeOfTechnology,\r\n    },\r\n    {\r\n      id: 'prominentDevelopers',\r\n      title: 'Prominent Developers',\r\n      content: tech.prominentDevelopers,\r\n    },\r\n  ],\r\n})\r\n","import React from 'react'\r\nimport {\r\n  ChallengeFamilyDictionary,\r\n  ChallengeDictionary,\r\n  ChallengeFamilyQueryData,\r\n  ChallengeQueryData,\r\n} from '../../types/Global'\r\nimport { getChallengeFamiliesDictionary, getChallengesDictionary } from '../lib/helpers'\r\nimport { graphql, Link, navigate } from 'gatsby'\r\nimport SEO from '../components/core/seo'\r\nimport Layout from '../components/core/layout'\r\nimport '../styles/challenge-to-tech.scss'\r\n\r\ninterface Props {\r\n  data: {\r\n    allCognitiveChallengeFamiliesCsv: ChallengeFamilyQueryData[]\r\n    allCognitiveChallengesCsv: ChallengeQueryData[]\r\n  }\r\n}\r\n\r\nexport default function ChallengeToTech(props: Props) {\r\n  const { data } = props\r\n\r\n  const challengeFamilies: ChallengeFamilyDictionary = getChallengeFamiliesDictionary(\r\n    data.allCognitiveChallengeFamiliesCsv,\r\n    data.allCognitiveChallengesCsv\r\n  )\r\n\r\n  const challenges: ChallengeDictionary = getChallengesDictionary(data.allCognitiveChallengesCsv)\r\n\r\n  const onChallengeFamilyPress = (familyId: string) => {\r\n    navigate(`/challenge-to-technology-visualisation?family=FAMILY${familyId}`)\r\n  }\r\n\r\n  return (\r\n    <Layout pageHeader=\"Technology to Future Challenge Mapping\">\r\n      <SEO title=\"Challenge to Technology\" />\r\n      <div className=\"c-to-t__grid\">\r\n        <div className=\"c-to-t__grid-text\">\r\n          This page shows a series of defence-specific challenges which were extracted from a detailed analysis of a\r\n          number of future vision documents. They represent challenges that could emerge from the future operating\r\n          environment and are grouped into thematic families. Selecting a family of challenges will allow you to see the\r\n          links between those challenges and any relevant HMI technologies. For further details of just the challenges\r\n          themselves, click <Link to=\"/cognitive-challenge-library\">here</Link>\r\n        </div>\r\n        <div className=\"c-to-t__families\">\r\n          {Object.keys(challengeFamilies).map((famId) => (\r\n            <div key={famId} className=\"c-to-t__family-group\" onClick={() => onChallengeFamilyPress(famId)}>\r\n              <div className=\"c-to-t__family-grid-title\">{challengeFamilies[famId].familyName}</div>\r\n              <div className=\"c-to-t__challenge-grid\">\r\n                {challengeFamilies[famId].challenges.map((chalId) => (\r\n                  <div key={chalId} className=\"c-to-t__challenge\">\r\n                    {challenges[chalId].challenge}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const challengesAndFamilys = graphql`\r\n  {\r\n    allCognitiveChallengeFamiliesCsv {\r\n      edges {\r\n        node {\r\n          family\r\n          familyName\r\n        }\r\n      }\r\n    }\r\n    allCognitiveChallengesCsv {\r\n      edges {\r\n        node {\r\n          id\r\n          family\r\n          challenge\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}